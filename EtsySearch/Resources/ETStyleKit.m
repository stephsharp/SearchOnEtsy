//
//  ETStyleKit.m
//  EtsySearch
//
//  Created by Steph Sharp on 18/02/2016.
//  Copyright (c) 2016 . All rights reserved.
//
//  Generated by PaintCode (www.paintcodeapp.com)
//

#import "ETStyleKit.h"


@implementation ETStyleKit

#pragma mark Initialization

+ (void)initialize
{
}

#pragma mark Drawing Methods

+ (void)drawArmchairIconWithRect: (CGRect)rect
{
    //// Color Declarations
    UIColor* orangeColor = [UIColor colorWithRed: 1 green: 0.408 blue: 0.086 alpha: 1];

    //// Variable Declarations
    CGFloat smallestSide = MIN(rect.size.height, rect.size.width);
    CGPoint position = CGPointMake(rect.origin.x + (rect.size.width - smallestSide) * 0.5, rect.origin.y + (rect.size.height - smallestSide) * 0.5);

    //// Frames
    CGRect frame = CGRectMake(position.x, position.y, smallestSide, smallestSide);

    //// Subframes
    CGRect armchair = CGRectMake(CGRectGetMinX(frame) + floor(CGRectGetWidth(frame) * 0.01084 + 0.09) + 0.41, CGRectGetMinY(frame) + floor(CGRectGetHeight(frame) * 0.03298 - 0.28) + 0.78, floor(CGRectGetWidth(frame) * 0.99204 - 0.47) - floor(CGRectGetWidth(frame) * 0.01084 + 0.09) + 0.56, floor(CGRectGetHeight(frame) * 0.97089 - 0.21) - floor(CGRectGetHeight(frame) * 0.03298 - 0.28) - 0.07);


    //// Armchair
    {
        //// Stroke-31 Drawing
        UIBezierPath* stroke31Path = [UIBezierPath bezierPath];
        [stroke31Path moveToPoint: CGPointMake(CGRectGetMinX(armchair) + 0.80435 * CGRectGetWidth(armchair), CGRectGetMinY(armchair) + 0.56522 * CGRectGetHeight(armchair))];
        [stroke31Path addLineToPoint: CGPointMake(CGRectGetMinX(armchair) + 0.84504 * CGRectGetWidth(armchair), CGRectGetMinY(armchair) + 0.30048 * CGRectGetHeight(armchair))];
        [stroke31Path addCurveToPoint: CGPointMake(CGRectGetMinX(armchair) + 0.78517 * CGRectGetWidth(armchair), CGRectGetMinY(armchair) + 0.09104 * CGRectGetHeight(armchair)) controlPoint1: CGPointMake(CGRectGetMinX(armchair) + 0.85661 * CGRectGetWidth(armchair), CGRectGetMinY(armchair) + 0.22530 * CGRectGetHeight(armchair)) controlPoint2: CGPointMake(CGRectGetMinX(armchair) + 0.83474 * CGRectGetWidth(armchair), CGRectGetMinY(armchair) + 0.14883 * CGRectGetHeight(armchair))];
        [stroke31Path addCurveToPoint: CGPointMake(CGRectGetMinX(armchair) + 0.58717 * CGRectGetWidth(armchair), CGRectGetMinY(armchair) + 0.00000 * CGRectGetHeight(armchair)) controlPoint1: CGPointMake(CGRectGetMinX(armchair) + 0.73561 * CGRectGetWidth(armchair), CGRectGetMinY(armchair) + 0.03322 * CGRectGetHeight(armchair)) controlPoint2: CGPointMake(CGRectGetMinX(armchair) + 0.66330 * CGRectGetWidth(armchair), CGRectGetMinY(armchair) + 0.00000 * CGRectGetHeight(armchair))];
        [stroke31Path addLineToPoint: CGPointMake(CGRectGetMinX(armchair) + 0.41270 * CGRectGetWidth(armchair), CGRectGetMinY(armchair) + 0.00000 * CGRectGetHeight(armchair))];
        [stroke31Path addCurveToPoint: CGPointMake(CGRectGetMinX(armchair) + 0.21474 * CGRectGetWidth(armchair), CGRectGetMinY(armchair) + 0.09104 * CGRectGetHeight(armchair)) controlPoint1: CGPointMake(CGRectGetMinX(armchair) + 0.33661 * CGRectGetWidth(armchair), CGRectGetMinY(armchair) + 0.00000 * CGRectGetHeight(armchair)) controlPoint2: CGPointMake(CGRectGetMinX(armchair) + 0.26430 * CGRectGetWidth(armchair), CGRectGetMinY(armchair) + 0.03322 * CGRectGetHeight(armchair))];
        [stroke31Path addCurveToPoint: CGPointMake(CGRectGetMinX(armchair) + 0.15487 * CGRectGetWidth(armchair), CGRectGetMinY(armchair) + 0.30048 * CGRectGetHeight(armchair)) controlPoint1: CGPointMake(CGRectGetMinX(armchair) + 0.16517 * CGRectGetWidth(armchair), CGRectGetMinY(armchair) + 0.14883 * CGRectGetHeight(armchair)) controlPoint2: CGPointMake(CGRectGetMinX(armchair) + 0.14330 * CGRectGetWidth(armchair), CGRectGetMinY(armchair) + 0.22530 * CGRectGetHeight(armchair))];
        [stroke31Path addLineToPoint: CGPointMake(CGRectGetMinX(armchair) + 0.19565 * CGRectGetWidth(armchair), CGRectGetMinY(armchair) + 0.56522 * CGRectGetHeight(armchair))];
        stroke31Path.miterLimit = 4;

        stroke31Path.usesEvenOddFillRule = YES;

        [orangeColor setStroke];
        stroke31Path.lineWidth = 2;
        [stroke31Path stroke];


        //// Stroke-33 Drawing
        UIBezierPath* stroke33Path = [UIBezierPath bezierPath];
        [stroke33Path moveToPoint: CGPointMake(CGRectGetMinX(armchair) + 0.25621 * CGRectGetWidth(armchair), CGRectGetMinY(armchair) + 0.95652 * CGRectGetHeight(armchair))];
        [stroke33Path addLineToPoint: CGPointMake(CGRectGetMinX(armchair) + 0.25621 * CGRectGetWidth(armchair), CGRectGetMinY(armchair) + 1.00000 * CGRectGetHeight(armchair))];
        stroke33Path.miterLimit = 4;

        stroke33Path.lineCapStyle = kCGLineCapSquare;

        stroke33Path.usesEvenOddFillRule = YES;

        [orangeColor setStroke];
        stroke33Path.lineWidth = 2;
        [stroke33Path stroke];


        //// Stroke-35 Drawing
        UIBezierPath* stroke35Path = [UIBezierPath bezierPath];
        [stroke35Path moveToPoint: CGPointMake(CGRectGetMinX(armchair) + 0.73800 * CGRectGetWidth(armchair), CGRectGetMinY(armchair) + 0.95652 * CGRectGetHeight(armchair))];
        [stroke35Path addLineToPoint: CGPointMake(CGRectGetMinX(armchair) + 0.73800 * CGRectGetWidth(armchair), CGRectGetMinY(armchair) + 1.00000 * CGRectGetHeight(armchair))];
        stroke35Path.miterLimit = 4;

        stroke35Path.lineCapStyle = kCGLineCapSquare;

        stroke35Path.usesEvenOddFillRule = YES;

        [orangeColor setStroke];
        stroke35Path.lineWidth = 2;
        [stroke35Path stroke];


        //// Stroke-37 Drawing
        UIBezierPath* stroke37Path = [UIBezierPath bezierPath];
        [stroke37Path moveToPoint: CGPointMake(CGRectGetMinX(armchair) + 0.91304 * CGRectGetWidth(armchair), CGRectGetMinY(armchair) + 0.52174 * CGRectGetHeight(armchair))];
        [stroke37Path addCurveToPoint: CGPointMake(CGRectGetMinX(armchair) + 0.76087 * CGRectGetWidth(armchair), CGRectGetMinY(armchair) + 0.67391 * CGRectGetHeight(armchair)) controlPoint1: CGPointMake(CGRectGetMinX(armchair) + 0.82891 * CGRectGetWidth(armchair), CGRectGetMinY(armchair) + 0.52174 * CGRectGetHeight(armchair)) controlPoint2: CGPointMake(CGRectGetMinX(armchair) + 0.76087 * CGRectGetWidth(armchair), CGRectGetMinY(armchair) + 0.58987 * CGRectGetHeight(armchair))];
        [stroke37Path addLineToPoint: CGPointMake(CGRectGetMinX(armchair) + 0.76087 * CGRectGetWidth(armchair), CGRectGetMinY(armchair) + 0.73913 * CGRectGetHeight(armchair))];
        [stroke37Path addCurveToPoint: CGPointMake(CGRectGetMinX(armchair) + 0.50000 * CGRectGetWidth(armchair), CGRectGetMinY(armchair) + 0.69565 * CGRectGetHeight(armchair)) controlPoint1: CGPointMake(CGRectGetMinX(armchair) + 0.76087 * CGRectGetWidth(armchair), CGRectGetMinY(armchair) + 0.73913 * CGRectGetHeight(armchair)) controlPoint2: CGPointMake(CGRectGetMinX(armchair) + 0.69565 * CGRectGetWidth(armchair), CGRectGetMinY(armchair) + 0.69565 * CGRectGetHeight(armchair))];
        [stroke37Path addCurveToPoint: CGPointMake(CGRectGetMinX(armchair) + 0.23913 * CGRectGetWidth(armchair), CGRectGetMinY(armchair) + 0.73913 * CGRectGetHeight(armchair)) controlPoint1: CGPointMake(CGRectGetMinX(armchair) + 0.30435 * CGRectGetWidth(armchair), CGRectGetMinY(armchair) + 0.69565 * CGRectGetHeight(armchair)) controlPoint2: CGPointMake(CGRectGetMinX(armchair) + 0.23913 * CGRectGetWidth(armchair), CGRectGetMinY(armchair) + 0.73913 * CGRectGetHeight(armchair))];
        [stroke37Path addLineToPoint: CGPointMake(CGRectGetMinX(armchair) + 0.23913 * CGRectGetWidth(armchair), CGRectGetMinY(armchair) + 0.67391 * CGRectGetHeight(armchair))];
        [stroke37Path addCurveToPoint: CGPointMake(CGRectGetMinX(armchair) + 0.08696 * CGRectGetWidth(armchair), CGRectGetMinY(armchair) + 0.52174 * CGRectGetHeight(armchair)) controlPoint1: CGPointMake(CGRectGetMinX(armchair) + 0.23913 * CGRectGetWidth(armchair), CGRectGetMinY(armchair) + 0.58987 * CGRectGetHeight(armchair)) controlPoint2: CGPointMake(CGRectGetMinX(armchair) + 0.17096 * CGRectGetWidth(armchair), CGRectGetMinY(armchair) + 0.52174 * CGRectGetHeight(armchair))];
        [stroke37Path addCurveToPoint: CGPointMake(CGRectGetMinX(armchair) + 0.00000 * CGRectGetWidth(armchair), CGRectGetMinY(armchair) + 0.60870 * CGRectGetHeight(armchair)) controlPoint1: CGPointMake(CGRectGetMinX(armchair) + 0.03891 * CGRectGetWidth(armchair), CGRectGetMinY(armchair) + 0.52174 * CGRectGetHeight(armchair)) controlPoint2: CGPointMake(CGRectGetMinX(armchair) + 0.00000 * CGRectGetWidth(armchair), CGRectGetMinY(armchair) + 0.56065 * CGRectGetHeight(armchair))];
        [stroke37Path addCurveToPoint: CGPointMake(CGRectGetMinX(armchair) + 0.05348 * CGRectGetWidth(armchair), CGRectGetMinY(armchair) + 0.68904 * CGRectGetHeight(armchair)) controlPoint1: CGPointMake(CGRectGetMinX(armchair) + 0.00000 * CGRectGetWidth(armchair), CGRectGetMinY(armchair) + 0.64487 * CGRectGetHeight(armchair)) controlPoint2: CGPointMake(CGRectGetMinX(armchair) + 0.02204 * CGRectGetWidth(armchair), CGRectGetMinY(armchair) + 0.67596 * CGRectGetHeight(armchair))];
        [stroke37Path addCurveToPoint: CGPointMake(CGRectGetMinX(armchair) + 0.08696 * CGRectGetWidth(armchair), CGRectGetMinY(armchair) + 0.73913 * CGRectGetHeight(armchair)) controlPoint1: CGPointMake(CGRectGetMinX(armchair) + 0.07370 * CGRectGetWidth(armchair), CGRectGetMinY(armchair) + 0.69739 * CGRectGetHeight(armchair)) controlPoint2: CGPointMake(CGRectGetMinX(armchair) + 0.08696 * CGRectGetWidth(armchair), CGRectGetMinY(armchair) + 0.71722 * CGRectGetHeight(armchair))];
        [stroke37Path addLineToPoint: CGPointMake(CGRectGetMinX(armchair) + 0.08696 * CGRectGetWidth(armchair), CGRectGetMinY(armchair) + 0.82609 * CGRectGetHeight(armchair))];
        [stroke37Path addCurveToPoint: CGPointMake(CGRectGetMinX(armchair) + 0.21739 * CGRectGetWidth(armchair), CGRectGetMinY(armchair) + 0.95652 * CGRectGetHeight(armchair)) controlPoint1: CGPointMake(CGRectGetMinX(armchair) + 0.08696 * CGRectGetWidth(armchair), CGRectGetMinY(armchair) + 0.89813 * CGRectGetHeight(armchair)) controlPoint2: CGPointMake(CGRectGetMinX(armchair) + 0.14530 * CGRectGetWidth(armchair), CGRectGetMinY(armchair) + 0.95652 * CGRectGetHeight(armchair))];
        [stroke37Path addLineToPoint: CGPointMake(CGRectGetMinX(armchair) + 0.78261 * CGRectGetWidth(armchair), CGRectGetMinY(armchair) + 0.95652 * CGRectGetHeight(armchair))];
        [stroke37Path addCurveToPoint: CGPointMake(CGRectGetMinX(armchair) + 0.91304 * CGRectGetWidth(armchair), CGRectGetMinY(armchair) + 0.82609 * CGRectGetHeight(armchair)) controlPoint1: CGPointMake(CGRectGetMinX(armchair) + 0.85457 * CGRectGetWidth(armchair), CGRectGetMinY(armchair) + 0.95652 * CGRectGetHeight(armchair)) controlPoint2: CGPointMake(CGRectGetMinX(armchair) + 0.91304 * CGRectGetWidth(armchair), CGRectGetMinY(armchair) + 0.89813 * CGRectGetHeight(armchair))];
        [stroke37Path addLineToPoint: CGPointMake(CGRectGetMinX(armchair) + 0.91304 * CGRectGetWidth(armchair), CGRectGetMinY(armchair) + 0.73913 * CGRectGetHeight(armchair))];
        [stroke37Path addCurveToPoint: CGPointMake(CGRectGetMinX(armchair) + 0.94643 * CGRectGetWidth(armchair), CGRectGetMinY(armchair) + 0.68904 * CGRectGetHeight(armchair)) controlPoint1: CGPointMake(CGRectGetMinX(armchair) + 0.91304 * CGRectGetWidth(armchair), CGRectGetMinY(armchair) + 0.71722 * CGRectGetHeight(armchair)) controlPoint2: CGPointMake(CGRectGetMinX(armchair) + 0.92617 * CGRectGetWidth(armchair), CGRectGetMinY(armchair) + 0.69739 * CGRectGetHeight(armchair))];
        [stroke37Path addCurveToPoint: CGPointMake(CGRectGetMinX(armchair) + 1.00000 * CGRectGetWidth(armchair), CGRectGetMinY(armchair) + 0.60870 * CGRectGetHeight(armchair)) controlPoint1: CGPointMake(CGRectGetMinX(armchair) + 0.97783 * CGRectGetWidth(armchair), CGRectGetMinY(armchair) + 0.67596 * CGRectGetHeight(armchair)) controlPoint2: CGPointMake(CGRectGetMinX(armchair) + 1.00000 * CGRectGetWidth(armchair), CGRectGetMinY(armchair) + 0.64487 * CGRectGetHeight(armchair))];
        [stroke37Path addCurveToPoint: CGPointMake(CGRectGetMinX(armchair) + 0.91304 * CGRectGetWidth(armchair), CGRectGetMinY(armchair) + 0.52174 * CGRectGetHeight(armchair)) controlPoint1: CGPointMake(CGRectGetMinX(armchair) + 1.00000 * CGRectGetWidth(armchair), CGRectGetMinY(armchair) + 0.56065 * CGRectGetHeight(armchair)) controlPoint2: CGPointMake(CGRectGetMinX(armchair) + 0.96109 * CGRectGetWidth(armchair), CGRectGetMinY(armchair) + 0.52174 * CGRectGetHeight(armchair))];
        [stroke37Path addLineToPoint: CGPointMake(CGRectGetMinX(armchair) + 0.91304 * CGRectGetWidth(armchair), CGRectGetMinY(armchair) + 0.52174 * CGRectGetHeight(armchair))];
        [stroke37Path closePath];
        stroke37Path.miterLimit = 4;

        stroke37Path.lineCapStyle = kCGLineCapSquare;

        stroke37Path.usesEvenOddFillRule = YES;

        [orangeColor setStroke];
        stroke37Path.lineWidth = 2;
        [stroke37Path stroke];


        //// Stroke-39 Drawing
        UIBezierPath* stroke39Path = [UIBezierPath bezierPath];
        [stroke39Path moveToPoint: CGPointMake(CGRectGetMinX(armchair) + 0.63043 * CGRectGetWidth(armchair), CGRectGetMinY(armchair) + 0.41304 * CGRectGetHeight(armchair))];
        [stroke39Path addLineToPoint: CGPointMake(CGRectGetMinX(armchair) + 0.56522 * CGRectGetWidth(armchair), CGRectGetMinY(armchair) + 0.36957 * CGRectGetHeight(armchair))];
        [stroke39Path addLineToPoint: CGPointMake(CGRectGetMinX(armchair) + 0.63043 * CGRectGetWidth(armchair), CGRectGetMinY(armchair) + 0.32609 * CGRectGetHeight(armchair))];
        stroke39Path.miterLimit = 4;

        stroke39Path.lineCapStyle = kCGLineCapSquare;

        stroke39Path.lineJoinStyle = kCGLineJoinRound;

        stroke39Path.usesEvenOddFillRule = YES;

        [orangeColor setStroke];
        stroke39Path.lineWidth = 2;
        [stroke39Path stroke];


        //// Stroke-41 Drawing
        UIBezierPath* stroke41Path = [UIBezierPath bezierPath];
        [stroke41Path moveToPoint: CGPointMake(CGRectGetMinX(armchair) + 0.36957 * CGRectGetWidth(armchair), CGRectGetMinY(armchair) + 0.41304 * CGRectGetHeight(armchair))];
        [stroke41Path addLineToPoint: CGPointMake(CGRectGetMinX(armchair) + 0.43478 * CGRectGetWidth(armchair), CGRectGetMinY(armchair) + 0.36957 * CGRectGetHeight(armchair))];
        [stroke41Path addLineToPoint: CGPointMake(CGRectGetMinX(armchair) + 0.36957 * CGRectGetWidth(armchair), CGRectGetMinY(armchair) + 0.32609 * CGRectGetHeight(armchair))];
        stroke41Path.miterLimit = 4;

        stroke41Path.lineCapStyle = kCGLineCapSquare;

        stroke41Path.lineJoinStyle = kCGLineJoinRound;

        stroke41Path.usesEvenOddFillRule = YES;

        [orangeColor setStroke];
        stroke41Path.lineWidth = 2;
        [stroke41Path stroke];


        //// Stroke-43 Drawing
        UIBezierPath* stroke43Path = [UIBezierPath bezierPath];
        [stroke43Path moveToPoint: CGPointMake(CGRectGetMinX(armchair) + 0.56516 * CGRectGetWidth(armchair), CGRectGetMinY(armchair) + 0.36893 * CGRectGetHeight(armchair))];
        [stroke43Path addCurveToPoint: CGPointMake(CGRectGetMinX(armchair) + 0.50070 * CGRectGetWidth(armchair), CGRectGetMinY(armchair) + 0.43478 * CGRectGetHeight(armchair)) controlPoint1: CGPointMake(CGRectGetMinX(armchair) + 0.56549 * CGRectGetWidth(armchair), CGRectGetMinY(armchair) + 0.40494 * CGRectGetHeight(armchair)) controlPoint2: CGPointMake(CGRectGetMinX(armchair) + 0.53663 * CGRectGetWidth(armchair), CGRectGetMinY(armchair) + 0.43442 * CGRectGetHeight(armchair))];
        [stroke43Path addCurveToPoint: CGPointMake(CGRectGetMinX(armchair) + 0.43503 * CGRectGetWidth(armchair), CGRectGetMinY(armchair) + 0.37024 * CGRectGetHeight(armchair)) controlPoint1: CGPointMake(CGRectGetMinX(armchair) + 0.46476 * CGRectGetWidth(armchair), CGRectGetMinY(armchair) + 0.43514 * CGRectGetHeight(armchair)) controlPoint2: CGPointMake(CGRectGetMinX(armchair) + 0.43536 * CGRectGetWidth(armchair), CGRectGetMinY(armchair) + 0.40625 * CGRectGetHeight(armchair))];
        [stroke43Path addCurveToPoint: CGPointMake(CGRectGetMinX(armchair) + 0.49950 * CGRectGetWidth(armchair), CGRectGetMinY(armchair) + 0.30438 * CGRectGetHeight(armchair)) controlPoint1: CGPointMake(CGRectGetMinX(armchair) + 0.43470 * CGRectGetWidth(armchair), CGRectGetMinY(armchair) + 0.33423 * CGRectGetHeight(armchair)) controlPoint2: CGPointMake(CGRectGetMinX(armchair) + 0.46356 * CGRectGetWidth(armchair), CGRectGetMinY(armchair) + 0.30475 * CGRectGetHeight(armchair))];
        [stroke43Path addCurveToPoint: CGPointMake(CGRectGetMinX(armchair) + 0.56516 * CGRectGetWidth(armchair), CGRectGetMinY(armchair) + 0.36893 * CGRectGetHeight(armchair)) controlPoint1: CGPointMake(CGRectGetMinX(armchair) + 0.53543 * CGRectGetWidth(armchair), CGRectGetMinY(armchair) + 0.30402 * CGRectGetHeight(armchair)) controlPoint2: CGPointMake(CGRectGetMinX(armchair) + 0.56483 * CGRectGetWidth(armchair), CGRectGetMinY(armchair) + 0.33292 * CGRectGetHeight(armchair))];
        [stroke43Path closePath];
        [orangeColor setStroke];
        stroke43Path.lineWidth = 2;
        [stroke43Path stroke];
    }
}

+ (void)drawTeaIconWithRect: (CGRect)rect
{
    //// Color Declarations
    UIColor* orangeColor = [UIColor colorWithRed: 1 green: 0.408 blue: 0.086 alpha: 1];

    //// Variable Declarations
    CGFloat smallestSide = MIN(rect.size.height, rect.size.width);
    CGPoint position = CGPointMake(rect.origin.x + (rect.size.width - smallestSide) * 0.5, rect.origin.y + (rect.size.height - smallestSide) * 0.5);

    //// Frames
    CGRect frame = CGRectMake(position.x, position.y, smallestSide, smallestSide);

    //// Subframes
    CGRect tea = CGRectMake(CGRectGetMinX(frame) + floor(CGRectGetWidth(frame) * 0.13846 + 0.5), CGRectGetMinY(frame) + floor(CGRectGetHeight(frame) * 0.00000 + 0.06) + 0.44, floor(CGRectGetWidth(frame) * 0.85953 - 0.24) - floor(CGRectGetWidth(frame) * 0.13846 + 0.5) + 0.74, floor(CGRectGetHeight(frame) * 0.98894 + 0.5) - floor(CGRectGetHeight(frame) * 0.00000 + 0.06) - 0.44);


    //// Tea
    {
        //// Shape Drawing
        UIBezierPath* shapePath = [UIBezierPath bezierPath];
        [shapePath moveToPoint: CGPointMake(CGRectGetMinX(tea) + 0.72012 * CGRectGetWidth(tea), CGRectGetMinY(tea) + 0.76751 * CGRectGetHeight(tea))];
        [shapePath addCurveToPoint: CGPointMake(CGRectGetMinX(tea) + 1.00000 * CGRectGetWidth(tea), CGRectGetMinY(tea) + 0.55534 * CGRectGetHeight(tea)) controlPoint1: CGPointMake(CGRectGetMinX(tea) + 0.77661 * CGRectGetWidth(tea), CGRectGetMinY(tea) + 0.68247 * CGRectGetHeight(tea)) controlPoint2: CGPointMake(CGRectGetMinX(tea) + 1.00000 * CGRectGetWidth(tea), CGRectGetMinY(tea) + 0.70151 * CGRectGetHeight(tea))];
        [shapePath addCurveToPoint: CGPointMake(CGRectGetMinX(tea) + 0.90245 * CGRectGetWidth(tea), CGRectGetMinY(tea) + 0.47917 * CGRectGetHeight(tea)) controlPoint1: CGPointMake(CGRectGetMinX(tea) + 1.00000 * CGRectGetWidth(tea), CGRectGetMinY(tea) + 0.50485 * CGRectGetHeight(tea)) controlPoint2: CGPointMake(CGRectGetMinX(tea) + 0.95317 * CGRectGetWidth(tea), CGRectGetMinY(tea) + 0.47917 * CGRectGetHeight(tea))];
        [shapePath addCurveToPoint: CGPointMake(CGRectGetMinX(tea) + 0.78678 * CGRectGetWidth(tea), CGRectGetMinY(tea) + 0.53150 * CGRectGetHeight(tea)) controlPoint1: CGPointMake(CGRectGetMinX(tea) + 0.82421 * CGRectGetWidth(tea), CGRectGetMinY(tea) + 0.47917 * CGRectGetHeight(tea)) controlPoint2: CGPointMake(CGRectGetMinX(tea) + 0.78678 * CGRectGetWidth(tea), CGRectGetMinY(tea) + 0.53150 * CGRectGetHeight(tea))];
        shapePath.miterLimit = 4;

        shapePath.usesEvenOddFillRule = YES;

        [orangeColor setStroke];
        shapePath.lineWidth = 2;
        [shapePath stroke];


        //// Shape 2 Drawing
        UIBezierPath* shape2Path = [UIBezierPath bezierPath];
        [shape2Path moveToPoint: CGPointMake(CGRectGetMinX(tea) + 0.57171 * CGRectGetWidth(tea), CGRectGetMinY(tea) + 0.10417 * CGRectGetHeight(tea))];
        [shape2Path addCurveToPoint: CGPointMake(CGRectGetMinX(tea) + 0.45718 * CGRectGetWidth(tea), CGRectGetMinY(tea) + 0.27084 * CGRectGetHeight(tea)) controlPoint1: CGPointMake(CGRectGetMinX(tea) + 0.57171 * CGRectGetWidth(tea), CGRectGetMinY(tea) + 0.19792 * CGRectGetHeight(tea)) controlPoint2: CGPointMake(CGRectGetMinX(tea) + 0.45718 * CGRectGetWidth(tea), CGRectGetMinY(tea) + 0.17992 * CGRectGetHeight(tea))];
        shape2Path.miterLimit = 4;

        shape2Path.usesEvenOddFillRule = YES;

        [orangeColor setStroke];
        shape2Path.lineWidth = 2;
        [shape2Path stroke];


        //// Shape 3 Drawing
        UIBezierPath* shape3Path = [UIBezierPath bezierPath];
        [shape3Path moveToPoint: CGPointMake(CGRectGetMinX(tea) + 0.45718 * CGRectGetWidth(tea), CGRectGetMinY(tea) + 0.00000 * CGRectGetHeight(tea))];
        [shape3Path addCurveToPoint: CGPointMake(CGRectGetMinX(tea) + 0.28620 * CGRectGetWidth(tea), CGRectGetMinY(tea) + 0.25001 * CGRectGetHeight(tea)) controlPoint1: CGPointMake(CGRectGetMinX(tea) + 0.45718 * CGRectGetWidth(tea), CGRectGetMinY(tea) + 0.13967 * CGRectGetHeight(tea)) controlPoint2: CGPointMake(CGRectGetMinX(tea) + 0.28620 * CGRectGetWidth(tea), CGRectGetMinY(tea) + 0.11303 * CGRectGetHeight(tea))];
        shape3Path.miterLimit = 4;

        shape3Path.usesEvenOddFillRule = YES;

        [orangeColor setStroke];
        shape3Path.lineWidth = 2;
        [shape3Path stroke];


        //// Shape 4 Drawing
        UIBezierPath* shape4Path = [UIBezierPath bezierPath];
        [shape4Path moveToPoint: CGPointMake(CGRectGetMinX(tea) + 0.54127 * CGRectGetWidth(tea), CGRectGetMinY(tea) + 0.99860 * CGRectGetHeight(tea))];
        [shape4Path addCurveToPoint: CGPointMake(CGRectGetMinX(tea) + 0.80007 * CGRectGetWidth(tea), CGRectGetMinY(tea) + 0.35418 * CGRectGetHeight(tea)) controlPoint1: CGPointMake(CGRectGetMinX(tea) + 0.69592 * CGRectGetWidth(tea), CGRectGetMinY(tea) + 0.93285 * CGRectGetHeight(tea)) controlPoint2: CGPointMake(CGRectGetMinX(tea) + 0.80007 * CGRectGetWidth(tea), CGRectGetMinY(tea) + 0.61138 * CGRectGetHeight(tea))];
        [shape4Path addLineToPoint: CGPointMake(CGRectGetMinX(tea) + 0.00000 * CGRectGetWidth(tea), CGRectGetMinY(tea) + 0.35418 * CGRectGetHeight(tea))];
        [shape4Path addCurveToPoint: CGPointMake(CGRectGetMinX(tea) + 0.26211 * CGRectGetWidth(tea), CGRectGetMinY(tea) + 1.00000 * CGRectGetHeight(tea)) controlPoint1: CGPointMake(CGRectGetMinX(tea) + 0.00000 * CGRectGetWidth(tea), CGRectGetMinY(tea) + 0.66280 * CGRectGetHeight(tea)) controlPoint2: CGPointMake(CGRectGetMinX(tea) + 0.10564 * CGRectGetWidth(tea), CGRectGetMinY(tea) + 0.93466 * CGRectGetHeight(tea))];
        [shape4Path addLineToPoint: CGPointMake(CGRectGetMinX(tea) + 0.54127 * CGRectGetWidth(tea), CGRectGetMinY(tea) + 0.99860 * CGRectGetHeight(tea))];
        [shape4Path addLineToPoint: CGPointMake(CGRectGetMinX(tea) + 0.54127 * CGRectGetWidth(tea), CGRectGetMinY(tea) + 0.99860 * CGRectGetHeight(tea))];
        [shape4Path closePath];
        shape4Path.miterLimit = 4;

        shape4Path.usesEvenOddFillRule = YES;

        [orangeColor setStroke];
        shape4Path.lineWidth = 2;
        [shape4Path stroke];


        //// Shape 5 Drawing
        UIBezierPath* shape5Path = [UIBezierPath bezierPath];
        [shape5Path moveToPoint: CGPointMake(CGRectGetMinX(tea) + 0.37914 * CGRectGetWidth(tea), CGRectGetMinY(tea) + 0.55748 * CGRectGetHeight(tea))];
        [shape5Path addLineToPoint: CGPointMake(CGRectGetMinX(tea) + 0.50348 * CGRectGetWidth(tea), CGRectGetMinY(tea) + 0.54707 * CGRectGetHeight(tea))];
        [shape5Path addCurveToPoint: CGPointMake(CGRectGetMinX(tea) + 0.53837 * CGRectGetWidth(tea), CGRectGetMinY(tea) + 0.54610 * CGRectGetHeight(tea)) controlPoint1: CGPointMake(CGRectGetMinX(tea) + 0.52121 * CGRectGetWidth(tea), CGRectGetMinY(tea) + 0.54558 * CGRectGetHeight(tea)) controlPoint2: CGPointMake(CGRectGetMinX(tea) + 0.53008 * CGRectGetWidth(tea), CGRectGetMinY(tea) + 0.54484 * CGRectGetHeight(tea))];
        [shape5Path addLineToPoint: CGPointMake(CGRectGetMinX(tea) + 0.53996 * CGRectGetWidth(tea), CGRectGetMinY(tea) + 0.54624 * CGRectGetHeight(tea))];
        [shape5Path addCurveToPoint: CGPointMake(CGRectGetMinX(tea) + 0.56495 * CGRectGetWidth(tea), CGRectGetMinY(tea) + 0.56071 * CGRectGetHeight(tea)) controlPoint1: CGPointMake(CGRectGetMinX(tea) + 0.55082 * CGRectGetWidth(tea), CGRectGetMinY(tea) + 0.54814 * CGRectGetHeight(tea)) controlPoint2: CGPointMake(CGRectGetMinX(tea) + 0.55996 * CGRectGetWidth(tea), CGRectGetMinY(tea) + 0.55343 * CGRectGetHeight(tea))];
        [shape5Path addCurveToPoint: CGPointMake(CGRectGetMinX(tea) + 0.57212 * CGRectGetWidth(tea), CGRectGetMinY(tea) + 0.58680 * CGRectGetHeight(tea)) controlPoint1: CGPointMake(CGRectGetMinX(tea) + 0.56907 * CGRectGetWidth(tea), CGRectGetMinY(tea) + 0.56742 * CGRectGetHeight(tea)) controlPoint2: CGPointMake(CGRectGetMinX(tea) + 0.57008 * CGRectGetWidth(tea), CGRectGetMinY(tea) + 0.57388 * CGRectGetHeight(tea))];
        [shape5Path addLineToPoint: CGPointMake(CGRectGetMinX(tea) + 0.58640 * CGRectGetWidth(tea), CGRectGetMinY(tea) + 0.67747 * CGRectGetHeight(tea))];
        [shape5Path addCurveToPoint: CGPointMake(CGRectGetMinX(tea) + 0.58773 * CGRectGetWidth(tea), CGRectGetMinY(tea) + 0.70290 * CGRectGetHeight(tea)) controlPoint1: CGPointMake(CGRectGetMinX(tea) + 0.58843 * CGRectGetWidth(tea), CGRectGetMinY(tea) + 0.69039 * CGRectGetHeight(tea)) controlPoint2: CGPointMake(CGRectGetMinX(tea) + 0.58945 * CGRectGetWidth(tea), CGRectGetMinY(tea) + 0.69685 * CGRectGetHeight(tea))];
        [shape5Path addLineToPoint: CGPointMake(CGRectGetMinX(tea) + 0.58753 * CGRectGetWidth(tea), CGRectGetMinY(tea) + 0.70406 * CGRectGetHeight(tea))];
        [shape5Path addCurveToPoint: CGPointMake(CGRectGetMinX(tea) + 0.56769 * CGRectGetWidth(tea), CGRectGetMinY(tea) + 0.72228 * CGRectGetHeight(tea)) controlPoint1: CGPointMake(CGRectGetMinX(tea) + 0.58493 * CGRectGetWidth(tea), CGRectGetMinY(tea) + 0.71198 * CGRectGetHeight(tea)) controlPoint2: CGPointMake(CGRectGetMinX(tea) + 0.57767 * CGRectGetWidth(tea), CGRectGetMinY(tea) + 0.71865 * CGRectGetHeight(tea))];
        [shape5Path addCurveToPoint: CGPointMake(CGRectGetMinX(tea) + 0.53190 * CGRectGetWidth(tea), CGRectGetMinY(tea) + 0.72751 * CGRectGetHeight(tea)) controlPoint1: CGPointMake(CGRectGetMinX(tea) + 0.55849 * CGRectGetWidth(tea), CGRectGetMinY(tea) + 0.72528 * CGRectGetHeight(tea)) controlPoint2: CGPointMake(CGRectGetMinX(tea) + 0.54963 * CGRectGetWidth(tea), CGRectGetMinY(tea) + 0.72602 * CGRectGetHeight(tea))];
        [shape5Path addLineToPoint: CGPointMake(CGRectGetMinX(tea) + 0.40756 * CGRectGetWidth(tea), CGRectGetMinY(tea) + 0.73792 * CGRectGetHeight(tea))];
        [shape5Path addCurveToPoint: CGPointMake(CGRectGetMinX(tea) + 0.37267 * CGRectGetWidth(tea), CGRectGetMinY(tea) + 0.73889 * CGRectGetHeight(tea)) controlPoint1: CGPointMake(CGRectGetMinX(tea) + 0.38983 * CGRectGetWidth(tea), CGRectGetMinY(tea) + 0.73940 * CGRectGetHeight(tea)) controlPoint2: CGPointMake(CGRectGetMinX(tea) + 0.38097 * CGRectGetWidth(tea), CGRectGetMinY(tea) + 0.74014 * CGRectGetHeight(tea))];
        [shape5Path addLineToPoint: CGPointMake(CGRectGetMinX(tea) + 0.37108 * CGRectGetWidth(tea), CGRectGetMinY(tea) + 0.73874 * CGRectGetHeight(tea))];
        [shape5Path addCurveToPoint: CGPointMake(CGRectGetMinX(tea) + 0.34609 * CGRectGetWidth(tea), CGRectGetMinY(tea) + 0.72428 * CGRectGetHeight(tea)) controlPoint1: CGPointMake(CGRectGetMinX(tea) + 0.36023 * CGRectGetWidth(tea), CGRectGetMinY(tea) + 0.73685 * CGRectGetHeight(tea)) controlPoint2: CGPointMake(CGRectGetMinX(tea) + 0.35108 * CGRectGetWidth(tea), CGRectGetMinY(tea) + 0.73155 * CGRectGetHeight(tea))];
        [shape5Path addCurveToPoint: CGPointMake(CGRectGetMinX(tea) + 0.33892 * CGRectGetWidth(tea), CGRectGetMinY(tea) + 0.69818 * CGRectGetHeight(tea)) controlPoint1: CGPointMake(CGRectGetMinX(tea) + 0.34198 * CGRectGetWidth(tea), CGRectGetMinY(tea) + 0.71757 * CGRectGetHeight(tea)) controlPoint2: CGPointMake(CGRectGetMinX(tea) + 0.34096 * CGRectGetWidth(tea), CGRectGetMinY(tea) + 0.71111 * CGRectGetHeight(tea))];
        [shape5Path addLineToPoint: CGPointMake(CGRectGetMinX(tea) + 0.32465 * CGRectGetWidth(tea), CGRectGetMinY(tea) + 0.60752 * CGRectGetHeight(tea))];
        [shape5Path addCurveToPoint: CGPointMake(CGRectGetMinX(tea) + 0.32331 * CGRectGetWidth(tea), CGRectGetMinY(tea) + 0.58208 * CGRectGetHeight(tea)) controlPoint1: CGPointMake(CGRectGetMinX(tea) + 0.32261 * CGRectGetWidth(tea), CGRectGetMinY(tea) + 0.59460 * CGRectGetHeight(tea)) controlPoint2: CGPointMake(CGRectGetMinX(tea) + 0.32159 * CGRectGetWidth(tea), CGRectGetMinY(tea) + 0.58813 * CGRectGetHeight(tea))];
        [shape5Path addLineToPoint: CGPointMake(CGRectGetMinX(tea) + 0.32352 * CGRectGetWidth(tea), CGRectGetMinY(tea) + 0.58092 * CGRectGetHeight(tea))];
        [shape5Path addCurveToPoint: CGPointMake(CGRectGetMinX(tea) + 0.34336 * CGRectGetWidth(tea), CGRectGetMinY(tea) + 0.56270 * CGRectGetHeight(tea)) controlPoint1: CGPointMake(CGRectGetMinX(tea) + 0.32611 * CGRectGetWidth(tea), CGRectGetMinY(tea) + 0.57301 * CGRectGetHeight(tea)) controlPoint2: CGPointMake(CGRectGetMinX(tea) + 0.33338 * CGRectGetWidth(tea), CGRectGetMinY(tea) + 0.56634 * CGRectGetHeight(tea))];
        [shape5Path addCurveToPoint: CGPointMake(CGRectGetMinX(tea) + 0.37914 * CGRectGetWidth(tea), CGRectGetMinY(tea) + 0.55748 * CGRectGetHeight(tea)) controlPoint1: CGPointMake(CGRectGetMinX(tea) + 0.35255 * CGRectGetWidth(tea), CGRectGetMinY(tea) + 0.55970 * CGRectGetHeight(tea)) controlPoint2: CGPointMake(CGRectGetMinX(tea) + 0.36142 * CGRectGetWidth(tea), CGRectGetMinY(tea) + 0.55896 * CGRectGetHeight(tea))];
        [shape5Path closePath];
        [orangeColor setStroke];
        shape5Path.lineWidth = 2;
        [shape5Path stroke];


        //// Shape 6 Drawing
        UIBezierPath* shape6Path = [UIBezierPath bezierPath];
        [shape6Path moveToPoint: CGPointMake(CGRectGetMinX(tea) + 0.38989 * CGRectGetWidth(tea), CGRectGetMinY(tea) + 0.35539 * CGRectGetHeight(tea))];
        [shape6Path addCurveToPoint: CGPointMake(CGRectGetMinX(tea) + 0.43932 * CGRectGetWidth(tea), CGRectGetMinY(tea) + 0.55077 * CGRectGetHeight(tea)) controlPoint1: CGPointMake(CGRectGetMinX(tea) + 0.40718 * CGRectGetWidth(tea), CGRectGetMinY(tea) + 0.38231 * CGRectGetHeight(tea)) controlPoint2: CGPointMake(CGRectGetMinX(tea) + 0.43575 * CGRectGetWidth(tea), CGRectGetMinY(tea) + 0.49567 * CGRectGetHeight(tea))];
        shape6Path.miterLimit = 4;

        shape6Path.usesEvenOddFillRule = YES;

        [orangeColor setStroke];
        shape6Path.lineWidth = 2;
        [shape6Path stroke];
    }
}

+ (void)drawShoeIconWithRect: (CGRect)rect
{
    //// Color Declarations
    UIColor* orangeColor = [UIColor colorWithRed: 1 green: 0.408 blue: 0.086 alpha: 1];

    //// Variable Declarations
    CGFloat smallestSide = MIN(rect.size.height, rect.size.width);
    CGPoint position = CGPointMake(rect.origin.x + (rect.size.width - smallestSide) * 0.5, rect.origin.y + (rect.size.height - smallestSide) * 0.5);

    //// Frames
    CGRect frame = CGRectMake(position.x, position.y, smallestSide, smallestSide);

    //// Subframes
    CGRect shoe = CGRectMake(CGRectGetMinX(frame) + floor(CGRectGetWidth(frame) * 0.07692 + 0.5), CGRectGetMinY(frame) + floor(CGRectGetHeight(frame) * 0.13846 - 0.24) + 0.74, floor(CGRectGetWidth(frame) * 0.90539 - 0.2) - floor(CGRectGetWidth(frame) * 0.07692 + 0.5) + 0.7, floor(CGRectGetHeight(frame) * 0.85585 + 0.5) - floor(CGRectGetHeight(frame) * 0.13846 - 0.24) - 0.74);


    //// Shoe
    {
        //// Shape Drawing
        UIBezierPath* shapePath = [UIBezierPath bezierPath];
        [shapePath moveToPoint: CGPointMake(CGRectGetMinX(shoe) + 0.17848 * CGRectGetWidth(shoe), CGRectGetMinY(shoe) + 0.56410 * CGRectGetHeight(shoe))];
        [shapePath addCurveToPoint: CGPointMake(CGRectGetMinX(shoe) + 0.64475 * CGRectGetWidth(shoe), CGRectGetMinY(shoe) + 1.00000 * CGRectGetHeight(shoe)) controlPoint1: CGPointMake(CGRectGetMinX(shoe) + 0.34063 * CGRectGetWidth(shoe), CGRectGetMinY(shoe) + 0.63244 * CGRectGetHeight(shoe)) controlPoint2: CGPointMake(CGRectGetMinX(shoe) + 0.38777 * CGRectGetWidth(shoe), CGRectGetMinY(shoe) + 1.00000 * CGRectGetHeight(shoe))];
        [shapePath addLineToPoint: CGPointMake(CGRectGetMinX(shoe) + 0.95559 * CGRectGetWidth(shoe), CGRectGetMinY(shoe) + 1.00000 * CGRectGetHeight(shoe))];
        [shapePath addCurveToPoint: CGPointMake(CGRectGetMinX(shoe) + 1.00000 * CGRectGetWidth(shoe), CGRectGetMinY(shoe) + 0.94872 * CGRectGetHeight(shoe)) controlPoint1: CGPointMake(CGRectGetMinX(shoe) + 1.00000 * CGRectGetWidth(shoe), CGRectGetMinY(shoe) + 1.00000 * CGRectGetHeight(shoe)) controlPoint2: CGPointMake(CGRectGetMinX(shoe) + 1.00000 * CGRectGetWidth(shoe), CGRectGetMinY(shoe) + 0.97131 * CGRectGetHeight(shoe))];
        [shapePath addCurveToPoint: CGPointMake(CGRectGetMinX(shoe) + 0.44492 * CGRectGetWidth(shoe), CGRectGetMinY(shoe) + 0.00000 * CGRectGetHeight(shoe)) controlPoint1: CGPointMake(CGRectGetMinX(shoe) + 1.00000 * CGRectGetWidth(shoe), CGRectGetMinY(shoe) + 0.68149 * CGRectGetHeight(shoe)) controlPoint2: CGPointMake(CGRectGetMinX(shoe) + 0.48597 * CGRectGetWidth(shoe), CGRectGetMinY(shoe) + 0.54541 * CGRectGetHeight(shoe))];
        [shapePath addLineToPoint: CGPointMake(CGRectGetMinX(shoe) + 0.04526 * CGRectGetWidth(shoe), CGRectGetMinY(shoe) + 0.00000 * CGRectGetHeight(shoe))];
        [shapePath addCurveToPoint: CGPointMake(CGRectGetMinX(shoe) + 0.00085 * CGRectGetWidth(shoe), CGRectGetMinY(shoe) + 0.36395 * CGRectGetHeight(shoe)) controlPoint1: CGPointMake(CGRectGetMinX(shoe) + 0.03815 * CGRectGetWidth(shoe), CGRectGetMinY(shoe) + 0.10082 * CGRectGetHeight(shoe)) controlPoint2: CGPointMake(CGRectGetMinX(shoe) + 0.00085 * CGRectGetWidth(shoe), CGRectGetMinY(shoe) + 0.28703 * CGRectGetHeight(shoe))];
        [shapePath addCurveToPoint: CGPointMake(CGRectGetMinX(shoe) + 0.17848 * CGRectGetWidth(shoe), CGRectGetMinY(shoe) + 0.56410 * CGRectGetHeight(shoe)) controlPoint1: CGPointMake(CGRectGetMinX(shoe) + 0.00085 * CGRectGetWidth(shoe), CGRectGetMinY(shoe) + 0.36395 * CGRectGetHeight(shoe)) controlPoint2: CGPointMake(CGRectGetMinX(shoe) + -0.02275 * CGRectGetWidth(shoe), CGRectGetMinY(shoe) + 0.56410 * CGRectGetHeight(shoe))];
        [shapePath addLineToPoint: CGPointMake(CGRectGetMinX(shoe) + 0.17848 * CGRectGetWidth(shoe), CGRectGetMinY(shoe) + 0.56410 * CGRectGetHeight(shoe))];
        [shapePath closePath];
        shapePath.miterLimit = 4;

        shapePath.usesEvenOddFillRule = YES;

        [orangeColor setStroke];
        shapePath.lineWidth = 2;
        [shapePath stroke];


        //// Shape 2 Drawing
        UIBezierPath* shape2Path = [UIBezierPath bezierPath];
        [shape2Path moveToPoint: CGPointMake(CGRectGetMinX(shoe) + 0.00000 * CGRectGetWidth(shoe), CGRectGetMinY(shoe) + 0.35897 * CGRectGetHeight(shoe))];
        [shape2Path addCurveToPoint: CGPointMake(CGRectGetMinX(shoe) + 0.11102 * CGRectGetWidth(shoe), CGRectGetMinY(shoe) + 0.99503 * CGRectGetHeight(shoe)) controlPoint1: CGPointMake(CGRectGetMinX(shoe) + 0.00000 * CGRectGetWidth(shoe), CGRectGetMinY(shoe) + 0.56215 * CGRectGetHeight(shoe)) controlPoint2: CGPointMake(CGRectGetMinX(shoe) + 0.11102 * CGRectGetWidth(shoe), CGRectGetMinY(shoe) + 0.64023 * CGRectGetHeight(shoe))];
        [shape2Path addLineToPoint: CGPointMake(CGRectGetMinX(shoe) + 0.17763 * CGRectGetWidth(shoe), CGRectGetMinY(shoe) + 0.99503 * CGRectGetHeight(shoe))];
        [shape2Path addLineToPoint: CGPointMake(CGRectGetMinX(shoe) + 0.17763 * CGRectGetWidth(shoe), CGRectGetMinY(shoe) + 0.56122 * CGRectGetHeight(shoe))];
        shape2Path.miterLimit = 4;

        shape2Path.usesEvenOddFillRule = YES;

        [orangeColor setStroke];
        shape2Path.lineWidth = 2;
        [shape2Path stroke];
    }
}

+ (void)drawRingIconWithRect: (CGRect)rect
{
    //// Color Declarations
    UIColor* orangeColor = [UIColor colorWithRed: 1 green: 0.408 blue: 0.086 alpha: 1];

    //// Variable Declarations
    CGFloat smallestSide = MIN(rect.size.height, rect.size.width);
    CGPoint position = CGPointMake(rect.origin.x + (rect.size.width - smallestSide) * 0.5, rect.origin.y + (rect.size.height - smallestSide) * 0.5);

    //// Frames
    CGRect frame = CGRectMake((position.x + 3), position.y, smallestSide, smallestSide);

    //// Subframes
    CGRect ring = CGRectMake(CGRectGetMinX(frame) + floor(CGRectGetWidth(frame) * 0.05385 + 0.5), CGRectGetMinY(frame) + floor(CGRectGetHeight(frame) * 0.02308 + 0.25) + 0.25, floor(CGRectGetWidth(frame) * 0.90000 + 0.5) - floor(CGRectGetWidth(frame) * 0.05385 + 0.5), floor(CGRectGetHeight(frame) * 0.97500 + 0.5) - floor(CGRectGetHeight(frame) * 0.02308 + 0.25) - 0.25);


    //// Ring
    {
        //// Shape Drawing
        UIBezierPath* shapePath = [UIBezierPath bezierPath];
        [shapePath moveToPoint: CGPointMake(CGRectGetMinX(ring) + 0.61909 * CGRectGetWidth(ring), CGRectGetMinY(ring) + 0.12430 * CGRectGetHeight(ring))];
        [shapePath addCurveToPoint: CGPointMake(CGRectGetMinX(ring) + 1.00000 * CGRectGetWidth(ring), CGRectGetMinY(ring) + 0.55556 * CGRectGetHeight(ring)) controlPoint1: CGPointMake(CGRectGetMinX(ring) + 0.84179 * CGRectGetWidth(ring), CGRectGetMinY(ring) + 0.16919 * CGRectGetHeight(ring)) controlPoint2: CGPointMake(CGRectGetMinX(ring) + 1.00000 * CGRectGetWidth(ring), CGRectGetMinY(ring) + 0.34402 * CGRectGetHeight(ring))];
        [shapePath addCurveToPoint: CGPointMake(CGRectGetMinX(ring) + 0.50000 * CGRectGetWidth(ring), CGRectGetMinY(ring) + 1.00000 * CGRectGetHeight(ring)) controlPoint1: CGPointMake(CGRectGetMinX(ring) + 1.00000 * CGRectGetWidth(ring), CGRectGetMinY(ring) + 0.80102 * CGRectGetHeight(ring)) controlPoint2: CGPointMake(CGRectGetMinX(ring) + 0.77615 * CGRectGetWidth(ring), CGRectGetMinY(ring) + 1.00000 * CGRectGetHeight(ring))];
        [shapePath addCurveToPoint: CGPointMake(CGRectGetMinX(ring) + 0.00000 * CGRectGetWidth(ring), CGRectGetMinY(ring) + 0.55556 * CGRectGetHeight(ring)) controlPoint1: CGPointMake(CGRectGetMinX(ring) + 0.22385 * CGRectGetWidth(ring), CGRectGetMinY(ring) + 1.00000 * CGRectGetHeight(ring)) controlPoint2: CGPointMake(CGRectGetMinX(ring) + 0.00000 * CGRectGetWidth(ring), CGRectGetMinY(ring) + 0.80102 * CGRectGetHeight(ring))];
        [shapePath addCurveToPoint: CGPointMake(CGRectGetMinX(ring) + 0.38091 * CGRectGetWidth(ring), CGRectGetMinY(ring) + 0.12430 * CGRectGetHeight(ring)) controlPoint1: CGPointMake(CGRectGetMinX(ring) + 0.00000 * CGRectGetWidth(ring), CGRectGetMinY(ring) + 0.34291 * CGRectGetHeight(ring)) controlPoint2: CGPointMake(CGRectGetMinX(ring) + 0.15648 * CGRectGetWidth(ring), CGRectGetMinY(ring) + 0.16803 * CGRectGetHeight(ring))];
        shapePath.miterLimit = 4;

        shapePath.usesEvenOddFillRule = YES;

        [orangeColor setStroke];
        shapePath.lineWidth = 2;
        [shapePath stroke];


        //// Oval 2 Drawing
        UIBezierPath* oval2Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(CGRectGetMinX(ring) + floor(CGRectGetWidth(ring) * 0.10000 + 0.5), CGRectGetMinY(ring) + floor(CGRectGetHeight(ring) * 0.20000 + 0.5), floor(CGRectGetWidth(ring) * 0.90000 + 0.5) - floor(CGRectGetWidth(ring) * 0.10000 + 0.5), floor(CGRectGetHeight(ring) * 0.91111 + 0.5) - floor(CGRectGetHeight(ring) * 0.20000 + 0.5))];
        [orangeColor setStroke];
        oval2Path.lineWidth = 2;
        [oval2Path stroke];


        //// Shape 2 Drawing
        UIBezierPath* shape2Path = [UIBezierPath bezierPath];
        [shape2Path moveToPoint: CGPointMake(CGRectGetMinX(ring) + 0.57500 * CGRectGetWidth(ring), CGRectGetMinY(ring) + 0.00000 * CGRectGetHeight(ring))];
        [shape2Path addLineToPoint: CGPointMake(CGRectGetMinX(ring) + 0.42500 * CGRectGetWidth(ring), CGRectGetMinY(ring) + 0.00000 * CGRectGetHeight(ring))];
        [shape2Path addLineToPoint: CGPointMake(CGRectGetMinX(ring) + 0.32500 * CGRectGetWidth(ring), CGRectGetMinY(ring) + 0.06667 * CGRectGetHeight(ring))];
        [shape2Path addLineToPoint: CGPointMake(CGRectGetMinX(ring) + 0.45000 * CGRectGetWidth(ring), CGRectGetMinY(ring) + 0.20000 * CGRectGetHeight(ring))];
        [shape2Path addLineToPoint: CGPointMake(CGRectGetMinX(ring) + 0.55000 * CGRectGetWidth(ring), CGRectGetMinY(ring) + 0.20000 * CGRectGetHeight(ring))];
        [shape2Path addLineToPoint: CGPointMake(CGRectGetMinX(ring) + 0.67500 * CGRectGetWidth(ring), CGRectGetMinY(ring) + 0.06667 * CGRectGetHeight(ring))];
        [shape2Path addLineToPoint: CGPointMake(CGRectGetMinX(ring) + 0.57500 * CGRectGetWidth(ring), CGRectGetMinY(ring) + 0.00000 * CGRectGetHeight(ring))];
        [shape2Path closePath];
        shape2Path.miterLimit = 4;

        shape2Path.usesEvenOddFillRule = YES;

        [orangeColor setStroke];
        shape2Path.lineWidth = 2;
        [shape2Path stroke];


        //// Line Drawing
        UIBezierPath* linePath = [UIBezierPath bezierPath];
        [linePath moveToPoint: CGPointMake(CGRectGetMinX(ring) + 0.50000 * CGRectGetWidth(ring), CGRectGetMinY(ring) + 0.06667 * CGRectGetHeight(ring))];
        [linePath addLineToPoint: CGPointMake(CGRectGetMinX(ring) + 0.67500 * CGRectGetWidth(ring), CGRectGetMinY(ring) + 0.06667 * CGRectGetHeight(ring))];
        linePath.miterLimit = 4;

        linePath.usesEvenOddFillRule = YES;

        [orangeColor setStroke];
        linePath.lineWidth = 2;
        [linePath stroke];


        //// Line 2 Drawing
        UIBezierPath* line2Path = [UIBezierPath bezierPath];
        [line2Path moveToPoint: CGPointMake(CGRectGetMinX(ring) + 0.32500 * CGRectGetWidth(ring), CGRectGetMinY(ring) + 0.06667 * CGRectGetHeight(ring))];
        [line2Path addLineToPoint: CGPointMake(CGRectGetMinX(ring) + 0.45000 * CGRectGetWidth(ring), CGRectGetMinY(ring) + 0.06667 * CGRectGetHeight(ring))];
        line2Path.miterLimit = 4;

        line2Path.usesEvenOddFillRule = YES;

        [orangeColor setStroke];
        line2Path.lineWidth = 2;
        [line2Path stroke];
    }
}

+ (void)drawLampIconWithRect: (CGRect)rect
{
    //// Color Declarations
    UIColor* orangeColor = [UIColor colorWithRed: 1 green: 0.408 blue: 0.086 alpha: 1];

    //// Variable Declarations
    CGFloat smallestSide = MIN(rect.size.height, rect.size.width);
    CGPoint position = CGPointMake(rect.origin.x + (rect.size.width - smallestSide) * 0.5, rect.origin.y + (rect.size.height - smallestSide) * 0.5);

    //// Frames
    CGRect frame = CGRectMake(position.x, position.y, smallestSide, smallestSide);

    //// Subframes
    CGRect lamp = CGRectMake(CGRectGetMinX(frame) + floor(CGRectGetWidth(frame) * 0.07692 + 0.5), CGRectGetMinY(frame) + floor(CGRectGetHeight(frame) * 0.01538 + 0.21) + 0.29, floor(CGRectGetWidth(frame) * 0.92308 + 0.5) - floor(CGRectGetWidth(frame) * 0.07692 + 0.5), floor(CGRectGetHeight(frame) * 0.98242 + 0.5) - floor(CGRectGetHeight(frame) * 0.01538 + 0.21) - 0.29);


    //// Lamp
    {
        //// Shape Drawing
        UIBezierPath* shapePath = [UIBezierPath bezierPath];
        [shapePath moveToPoint: CGPointMake(CGRectGetMinX(lamp) + 0.54762 * CGRectGetWidth(lamp), CGRectGetMinY(lamp) + 0.85417 * CGRectGetHeight(lamp))];
        [shapePath addCurveToPoint: CGPointMake(CGRectGetMinX(lamp) + 0.64286 * CGRectGetWidth(lamp), CGRectGetMinY(lamp) + 0.55037 * CGRectGetHeight(lamp)) controlPoint1: CGPointMake(CGRectGetMinX(lamp) + 0.54762 * CGRectGetWidth(lamp), CGRectGetMinY(lamp) + 0.68725 * CGRectGetHeight(lamp)) controlPoint2: CGPointMake(CGRectGetMinX(lamp) + 0.64286 * CGRectGetWidth(lamp), CGRectGetMinY(lamp) + 0.66700 * CGRectGetHeight(lamp))];
        [shapePath addCurveToPoint: CGPointMake(CGRectGetMinX(lamp) + 0.54762 * CGRectGetWidth(lamp), CGRectGetMinY(lamp) + 0.45833 * CGRectGetHeight(lamp)) controlPoint1: CGPointMake(CGRectGetMinX(lamp) + 0.64286 * CGRectGetWidth(lamp), CGRectGetMinY(lamp) + 0.48152 * CGRectGetHeight(lamp)) controlPoint2: CGPointMake(CGRectGetMinX(lamp) + 0.54762 * CGRectGetWidth(lamp), CGRectGetMinY(lamp) + 0.45833 * CGRectGetHeight(lamp))];
        shapePath.miterLimit = 4;

        shapePath.usesEvenOddFillRule = YES;

        [orangeColor setStroke];
        shapePath.lineWidth = 2;
        [shapePath stroke];


        //// Shape 2 Drawing
        UIBezierPath* shape2Path = [UIBezierPath bezierPath];
        [shape2Path moveToPoint: CGPointMake(CGRectGetMinX(lamp) + 0.45238 * CGRectGetWidth(lamp), CGRectGetMinY(lamp) + 0.45833 * CGRectGetHeight(lamp))];
        [shape2Path addCurveToPoint: CGPointMake(CGRectGetMinX(lamp) + 0.35714 * CGRectGetWidth(lamp), CGRectGetMinY(lamp) + 0.55037 * CGRectGetHeight(lamp)) controlPoint1: CGPointMake(CGRectGetMinX(lamp) + 0.45238 * CGRectGetWidth(lamp), CGRectGetMinY(lamp) + 0.45833 * CGRectGetHeight(lamp)) controlPoint2: CGPointMake(CGRectGetMinX(lamp) + 0.35714 * CGRectGetWidth(lamp), CGRectGetMinY(lamp) + 0.48152 * CGRectGetHeight(lamp))];
        [shape2Path addCurveToPoint: CGPointMake(CGRectGetMinX(lamp) + 0.45238 * CGRectGetWidth(lamp), CGRectGetMinY(lamp) + 0.85417 * CGRectGetHeight(lamp)) controlPoint1: CGPointMake(CGRectGetMinX(lamp) + 0.35714 * CGRectGetWidth(lamp), CGRectGetMinY(lamp) + 0.66700 * CGRectGetHeight(lamp)) controlPoint2: CGPointMake(CGRectGetMinX(lamp) + 0.45238 * CGRectGetWidth(lamp), CGRectGetMinY(lamp) + 0.68725 * CGRectGetHeight(lamp))];
        shape2Path.miterLimit = 4;

        shape2Path.usesEvenOddFillRule = YES;

        [orangeColor setStroke];
        shape2Path.lineWidth = 2;
        [shape2Path stroke];


        //// Shape 3 Drawing
        UIBezierPath* shape3Path = [UIBezierPath bezierPath];
        [shape3Path moveToPoint: CGPointMake(CGRectGetMinX(lamp) + 1.00000 * CGRectGetWidth(lamp), CGRectGetMinY(lamp) + 0.45833 * CGRectGetHeight(lamp))];
        [shape3Path addLineToPoint: CGPointMake(CGRectGetMinX(lamp) + 0.00000 * CGRectGetWidth(lamp), CGRectGetMinY(lamp) + 0.45833 * CGRectGetHeight(lamp))];
        [shape3Path addLineToPoint: CGPointMake(CGRectGetMinX(lamp) + 0.19048 * CGRectGetWidth(lamp), CGRectGetMinY(lamp) + 0.00000 * CGRectGetHeight(lamp))];
        [shape3Path addLineToPoint: CGPointMake(CGRectGetMinX(lamp) + 0.80952 * CGRectGetWidth(lamp), CGRectGetMinY(lamp) + 0.00000 * CGRectGetHeight(lamp))];
        [shape3Path addLineToPoint: CGPointMake(CGRectGetMinX(lamp) + 1.00000 * CGRectGetWidth(lamp), CGRectGetMinY(lamp) + 0.45833 * CGRectGetHeight(lamp))];
        [shape3Path closePath];
        shape3Path.miterLimit = 4;

        shape3Path.usesEvenOddFillRule = YES;

        [orangeColor setStroke];
        shape3Path.lineWidth = 2;
        [shape3Path stroke];


        //// Shape 4 Drawing
        UIBezierPath* shape4Path = [UIBezierPath bezierPath];
        [shape4Path moveToPoint: CGPointMake(CGRectGetMinX(lamp) + 0.80952 * CGRectGetWidth(lamp), CGRectGetMinY(lamp) + 0.91667 * CGRectGetHeight(lamp))];
        [shape4Path addLineToPoint: CGPointMake(CGRectGetMinX(lamp) + 0.19048 * CGRectGetWidth(lamp), CGRectGetMinY(lamp) + 0.91667 * CGRectGetHeight(lamp))];
        [shape4Path addCurveToPoint: CGPointMake(CGRectGetMinX(lamp) + 0.16667 * CGRectGetWidth(lamp), CGRectGetMinY(lamp) + 0.93750 * CGRectGetHeight(lamp)) controlPoint1: CGPointMake(CGRectGetMinX(lamp) + 0.17733 * CGRectGetWidth(lamp), CGRectGetMinY(lamp) + 0.91667 * CGRectGetHeight(lamp)) controlPoint2: CGPointMake(CGRectGetMinX(lamp) + 0.16667 * CGRectGetWidth(lamp), CGRectGetMinY(lamp) + 0.92600 * CGRectGetHeight(lamp))];
        [shape4Path addLineToPoint: CGPointMake(CGRectGetMinX(lamp) + 0.16667 * CGRectGetWidth(lamp), CGRectGetMinY(lamp) + 1.00000 * CGRectGetHeight(lamp))];
        [shape4Path addLineToPoint: CGPointMake(CGRectGetMinX(lamp) + 0.83333 * CGRectGetWidth(lamp), CGRectGetMinY(lamp) + 1.00000 * CGRectGetHeight(lamp))];
        [shape4Path addLineToPoint: CGPointMake(CGRectGetMinX(lamp) + 0.83333 * CGRectGetWidth(lamp), CGRectGetMinY(lamp) + 0.93750 * CGRectGetHeight(lamp))];
        [shape4Path addCurveToPoint: CGPointMake(CGRectGetMinX(lamp) + 0.80952 * CGRectGetWidth(lamp), CGRectGetMinY(lamp) + 0.91667 * CGRectGetHeight(lamp)) controlPoint1: CGPointMake(CGRectGetMinX(lamp) + 0.83333 * CGRectGetWidth(lamp), CGRectGetMinY(lamp) + 0.92600 * CGRectGetHeight(lamp)) controlPoint2: CGPointMake(CGRectGetMinX(lamp) + 0.82267 * CGRectGetWidth(lamp), CGRectGetMinY(lamp) + 0.91667 * CGRectGetHeight(lamp))];
        [shape4Path addLineToPoint: CGPointMake(CGRectGetMinX(lamp) + 0.80952 * CGRectGetWidth(lamp), CGRectGetMinY(lamp) + 0.91667 * CGRectGetHeight(lamp))];
        [shape4Path closePath];
        shape4Path.miterLimit = 4;

        shape4Path.usesEvenOddFillRule = YES;

        [orangeColor setStroke];
        shape4Path.lineWidth = 2;
        [shape4Path stroke];


        //// Shape 5 Drawing
        UIBezierPath* shape5Path = [UIBezierPath bezierPath];
        [shape5Path moveToPoint: CGPointMake(CGRectGetMinX(lamp) + 0.71429 * CGRectGetWidth(lamp), CGRectGetMinY(lamp) + 0.91667 * CGRectGetHeight(lamp))];
        [shape5Path addLineToPoint: CGPointMake(CGRectGetMinX(lamp) + 0.71429 * CGRectGetWidth(lamp), CGRectGetMinY(lamp) + 0.87500 * CGRectGetHeight(lamp))];
        [shape5Path addCurveToPoint: CGPointMake(CGRectGetMinX(lamp) + 0.69048 * CGRectGetWidth(lamp), CGRectGetMinY(lamp) + 0.85417 * CGRectGetHeight(lamp)) controlPoint1: CGPointMake(CGRectGetMinX(lamp) + 0.71429 * CGRectGetWidth(lamp), CGRectGetMinY(lamp) + 0.86350 * CGRectGetHeight(lamp)) controlPoint2: CGPointMake(CGRectGetMinX(lamp) + 0.70362 * CGRectGetWidth(lamp), CGRectGetMinY(lamp) + 0.85417 * CGRectGetHeight(lamp))];
        [shape5Path addLineToPoint: CGPointMake(CGRectGetMinX(lamp) + 0.30952 * CGRectGetWidth(lamp), CGRectGetMinY(lamp) + 0.85417 * CGRectGetHeight(lamp))];
        [shape5Path addCurveToPoint: CGPointMake(CGRectGetMinX(lamp) + 0.28571 * CGRectGetWidth(lamp), CGRectGetMinY(lamp) + 0.87500 * CGRectGetHeight(lamp)) controlPoint1: CGPointMake(CGRectGetMinX(lamp) + 0.29638 * CGRectGetWidth(lamp), CGRectGetMinY(lamp) + 0.85417 * CGRectGetHeight(lamp)) controlPoint2: CGPointMake(CGRectGetMinX(lamp) + 0.28571 * CGRectGetWidth(lamp), CGRectGetMinY(lamp) + 0.86350 * CGRectGetHeight(lamp))];
        [shape5Path addLineToPoint: CGPointMake(CGRectGetMinX(lamp) + 0.28571 * CGRectGetWidth(lamp), CGRectGetMinY(lamp) + 0.91667 * CGRectGetHeight(lamp))];
        shape5Path.miterLimit = 4;

        shape5Path.usesEvenOddFillRule = YES;

        [orangeColor setStroke];
        shape5Path.lineWidth = 2;
        [shape5Path stroke];
    }
}

+ (void)drawGiftIconWithRect: (CGRect)rect
{
    //// Color Declarations
    UIColor* orangeColor = [UIColor colorWithRed: 1 green: 0.408 blue: 0.086 alpha: 1];

    //// Variable Declarations
    CGFloat smallestSide = MIN(rect.size.height, rect.size.width);
    CGPoint position = CGPointMake(rect.origin.x + (rect.size.width - smallestSide) * 0.5, rect.origin.y + (rect.size.height - smallestSide) * 0.5);

    //// Frames
    CGRect frame = CGRectMake(position.x, position.y, smallestSide, smallestSide);

    //// Subframes
    CGRect gift = CGRectMake(CGRectGetMinX(frame) + floor(CGRectGetWidth(frame) * 0.04615 + 0.5), CGRectGetMinY(frame) + floor(CGRectGetHeight(frame) * 0.03077 + 0.5), floor(CGRectGetWidth(frame) * 0.96923 + 0.5) - floor(CGRectGetWidth(frame) * 0.04615 + 0.5), floor(CGRectGetHeight(frame) * 0.95385 + 0.5) - floor(CGRectGetHeight(frame) * 0.03077 + 0.5));


    //// Gift
    {
        //// Shape Drawing
        UIBezierPath* shapePath = [UIBezierPath bezierPath];
        [shapePath moveToPoint: CGPointMake(CGRectGetMinX(gift) + 0.39130 * CGRectGetWidth(gift), CGRectGetMinY(gift) + 0.45652 * CGRectGetHeight(gift))];
        [shapePath addLineToPoint: CGPointMake(CGRectGetMinX(gift) + 0.00000 * CGRectGetWidth(gift), CGRectGetMinY(gift) + 0.45652 * CGRectGetHeight(gift))];
        [shapePath addLineToPoint: CGPointMake(CGRectGetMinX(gift) + 0.00000 * CGRectGetWidth(gift), CGRectGetMinY(gift) + 0.26087 * CGRectGetHeight(gift))];
        [shapePath addLineToPoint: CGPointMake(CGRectGetMinX(gift) + 1.00000 * CGRectGetWidth(gift), CGRectGetMinY(gift) + 0.26087 * CGRectGetHeight(gift))];
        [shapePath addLineToPoint: CGPointMake(CGRectGetMinX(gift) + 1.00000 * CGRectGetWidth(gift), CGRectGetMinY(gift) + 0.45652 * CGRectGetHeight(gift))];
        [shapePath addLineToPoint: CGPointMake(CGRectGetMinX(gift) + 0.60870 * CGRectGetWidth(gift), CGRectGetMinY(gift) + 0.45652 * CGRectGetHeight(gift))];
        shapePath.miterLimit = 4;

        shapePath.usesEvenOddFillRule = YES;

        [orangeColor setStroke];
        shapePath.lineWidth = 2;
        [shapePath stroke];


        //// Rectangle-path Drawing
        UIBezierPath* rectanglepathPath = [UIBezierPath bezierPathWithRect: CGRectMake(CGRectGetMinX(gift) + floor(CGRectGetWidth(gift) * 0.39130 - 0.46) + 0.96, CGRectGetMinY(gift) + floor(CGRectGetHeight(gift) * 0.26087 + 0.5), floor(CGRectGetWidth(gift) * 0.60870 + 0.46) - floor(CGRectGetWidth(gift) * 0.39130 - 0.46) - 0.91, floor(CGRectGetHeight(gift) * 1.00000 - 0.2) - floor(CGRectGetHeight(gift) * 0.26087 + 0.5) + 0.7)];
        [orangeColor setStroke];
        rectanglepathPath.lineWidth = 2;
        [rectanglepathPath stroke];


        //// Shape 2 Drawing
        UIBezierPath* shape2Path = [UIBezierPath bezierPath];
        [shape2Path moveToPoint: CGPointMake(CGRectGetMinX(gift) + 0.39130 * CGRectGetWidth(gift), CGRectGetMinY(gift) + 0.45652 * CGRectGetHeight(gift))];
        [shape2Path addLineToPoint: CGPointMake(CGRectGetMinX(gift) + 0.04348 * CGRectGetWidth(gift), CGRectGetMinY(gift) + 0.45652 * CGRectGetHeight(gift))];
        [shape2Path addLineToPoint: CGPointMake(CGRectGetMinX(gift) + 0.04348 * CGRectGetWidth(gift), CGRectGetMinY(gift) + 1.00000 * CGRectGetHeight(gift))];
        [shape2Path addLineToPoint: CGPointMake(CGRectGetMinX(gift) + 0.95652 * CGRectGetWidth(gift), CGRectGetMinY(gift) + 1.00000 * CGRectGetHeight(gift))];
        [shape2Path addLineToPoint: CGPointMake(CGRectGetMinX(gift) + 0.95652 * CGRectGetWidth(gift), CGRectGetMinY(gift) + 0.45652 * CGRectGetHeight(gift))];
        [shape2Path addLineToPoint: CGPointMake(CGRectGetMinX(gift) + 0.60870 * CGRectGetWidth(gift), CGRectGetMinY(gift) + 0.45652 * CGRectGetHeight(gift))];
        shape2Path.miterLimit = 4;

        shape2Path.usesEvenOddFillRule = YES;

        [orangeColor setStroke];
        shape2Path.lineWidth = 2;
        [shape2Path stroke];


        //// Shape 3 Drawing
        UIBezierPath* shape3Path = [UIBezierPath bezierPath];
        [shape3Path moveToPoint: CGPointMake(CGRectGetMinX(gift) + 0.50000 * CGRectGetWidth(gift), CGRectGetMinY(gift) + 0.23913 * CGRectGetHeight(gift))];
        [shape3Path addLineToPoint: CGPointMake(CGRectGetMinX(gift) + 0.32609 * CGRectGetWidth(gift), CGRectGetMinY(gift) + 0.23913 * CGRectGetHeight(gift))];
        [shape3Path addCurveToPoint: CGPointMake(CGRectGetMinX(gift) + 0.13043 * CGRectGetWidth(gift), CGRectGetMinY(gift) + 0.08696 * CGRectGetHeight(gift)) controlPoint1: CGPointMake(CGRectGetMinX(gift) + 0.23004 * CGRectGetWidth(gift), CGRectGetMinY(gift) + 0.23913 * CGRectGetHeight(gift)) controlPoint2: CGPointMake(CGRectGetMinX(gift) + 0.13043 * CGRectGetWidth(gift), CGRectGetMinY(gift) + 0.18302 * CGRectGetHeight(gift))];
        [shape3Path addCurveToPoint: CGPointMake(CGRectGetMinX(gift) + 0.22433 * CGRectGetWidth(gift), CGRectGetMinY(gift) + 0.00000 * CGRectGetHeight(gift)) controlPoint1: CGPointMake(CGRectGetMinX(gift) + 0.13043 * CGRectGetWidth(gift), CGRectGetMinY(gift) + 0.04722 * CGRectGetHeight(gift)) controlPoint2: CGPointMake(CGRectGetMinX(gift) + 0.14952 * CGRectGetWidth(gift), CGRectGetMinY(gift) + 0.00000 * CGRectGetHeight(gift))];
        [shape3Path addCurveToPoint: CGPointMake(CGRectGetMinX(gift) + 0.50000 * CGRectGetWidth(gift), CGRectGetMinY(gift) + 0.23913 * CGRectGetHeight(gift)) controlPoint1: CGPointMake(CGRectGetMinX(gift) + 0.37470 * CGRectGetWidth(gift), CGRectGetMinY(gift) + 0.00000 * CGRectGetHeight(gift)) controlPoint2: CGPointMake(CGRectGetMinX(gift) + 0.37746 * CGRectGetWidth(gift), CGRectGetMinY(gift) + 0.23913 * CGRectGetHeight(gift))];
        [shape3Path addLineToPoint: CGPointMake(CGRectGetMinX(gift) + 0.50000 * CGRectGetWidth(gift), CGRectGetMinY(gift) + 0.23913 * CGRectGetHeight(gift))];
        [shape3Path closePath];
        shape3Path.miterLimit = 4;

        shape3Path.usesEvenOddFillRule = YES;

        [orangeColor setStroke];
        shape3Path.lineWidth = 2;
        [shape3Path stroke];


        //// Shape 4 Drawing
        UIBezierPath* shape4Path = [UIBezierPath bezierPath];
        [shape4Path moveToPoint: CGPointMake(CGRectGetMinX(gift) + 0.50000 * CGRectGetWidth(gift), CGRectGetMinY(gift) + 0.23913 * CGRectGetHeight(gift))];
        [shape4Path addLineToPoint: CGPointMake(CGRectGetMinX(gift) + 0.67391 * CGRectGetWidth(gift), CGRectGetMinY(gift) + 0.23913 * CGRectGetHeight(gift))];
        [shape4Path addCurveToPoint: CGPointMake(CGRectGetMinX(gift) + 0.86957 * CGRectGetWidth(gift), CGRectGetMinY(gift) + 0.08696 * CGRectGetHeight(gift)) controlPoint1: CGPointMake(CGRectGetMinX(gift) + 0.76996 * CGRectGetWidth(gift), CGRectGetMinY(gift) + 0.23913 * CGRectGetHeight(gift)) controlPoint2: CGPointMake(CGRectGetMinX(gift) + 0.86957 * CGRectGetWidth(gift), CGRectGetMinY(gift) + 0.18302 * CGRectGetHeight(gift))];
        [shape4Path addCurveToPoint: CGPointMake(CGRectGetMinX(gift) + 0.77567 * CGRectGetWidth(gift), CGRectGetMinY(gift) + 0.00000 * CGRectGetHeight(gift)) controlPoint1: CGPointMake(CGRectGetMinX(gift) + 0.86957 * CGRectGetWidth(gift), CGRectGetMinY(gift) + 0.04722 * CGRectGetHeight(gift)) controlPoint2: CGPointMake(CGRectGetMinX(gift) + 0.85048 * CGRectGetWidth(gift), CGRectGetMinY(gift) + 0.00000 * CGRectGetHeight(gift))];
        [shape4Path addCurveToPoint: CGPointMake(CGRectGetMinX(gift) + 0.50000 * CGRectGetWidth(gift), CGRectGetMinY(gift) + 0.23913 * CGRectGetHeight(gift)) controlPoint1: CGPointMake(CGRectGetMinX(gift) + 0.62530 * CGRectGetWidth(gift), CGRectGetMinY(gift) + 0.00000 * CGRectGetHeight(gift)) controlPoint2: CGPointMake(CGRectGetMinX(gift) + 0.62254 * CGRectGetWidth(gift), CGRectGetMinY(gift) + 0.23913 * CGRectGetHeight(gift))];
        [shape4Path addLineToPoint: CGPointMake(CGRectGetMinX(gift) + 0.50000 * CGRectGetWidth(gift), CGRectGetMinY(gift) + 0.23913 * CGRectGetHeight(gift))];
        [shape4Path closePath];
        shape4Path.miterLimit = 4;

        shape4Path.usesEvenOddFillRule = YES;

        [orangeColor setStroke];
        shape4Path.lineWidth = 2;
        [shape4Path stroke];
    }
}

+ (void)drawGlassesIconWithRect: (CGRect)rect
{
    //// Color Declarations
    UIColor* orangeColor = [UIColor colorWithRed: 1 green: 0.408 blue: 0.086 alpha: 1];

    //// Variable Declarations
    CGFloat smallestSide = MIN(rect.size.height, rect.size.width);
    CGPoint position = CGPointMake(rect.origin.x + (rect.size.width - smallestSide) * 0.5, rect.origin.y + (rect.size.height - smallestSide) * 0.5);

    //// Frames
    CGRect frame = CGRectMake(position.x, position.y, smallestSide, smallestSide);

    //// Subframes
    CGRect glasses = CGRectMake(CGRectGetMinX(frame) + floor(CGRectGetWidth(frame) * 0.03848 + 0.5) + 0, CGRectGetMinY(frame) + floor(CGRectGetHeight(frame) * 0.03848 - 0.17) + 0.67, floor(CGRectGetWidth(frame) * 0.94103 + 0.17) - floor(CGRectGetWidth(frame) * 0.03848 + 0.5) + 0.33, floor(CGRectGetHeight(frame) * 0.94103 - 0.5) - floor(CGRectGetHeight(frame) * 0.03848 - 0.17) + 0.33);


    //// Glasses
    {
        //// Shape Drawing
        UIBezierPath* shapePath = [UIBezierPath bezierPath];
        [shapePath moveToPoint: CGPointMake(CGRectGetMinX(glasses) + 0.48937 * CGRectGetWidth(glasses), CGRectGetMinY(glasses) + 0.48937 * CGRectGetHeight(glasses))];
        [shapePath addCurveToPoint: CGPointMake(CGRectGetMinX(glasses) + 0.67592 * CGRectGetWidth(glasses), CGRectGetMinY(glasses) + 0.16203 * CGRectGetHeight(glasses)) controlPoint1: CGPointMake(CGRectGetMinX(glasses) + 0.54385 * CGRectGetWidth(glasses), CGRectGetMinY(glasses) + 0.43489 * CGRectGetHeight(glasses)) controlPoint2: CGPointMake(CGRectGetMinX(glasses) + 0.57644 * CGRectGetWidth(glasses), CGRectGetMinY(glasses) + 0.28483 * CGRectGetHeight(glasses))];
        [shapePath addCurveToPoint: CGPointMake(CGRectGetMinX(glasses) + 0.85042 * CGRectGetWidth(glasses), CGRectGetMinY(glasses) + 0.00419 * CGRectGetHeight(glasses)) controlPoint1: CGPointMake(CGRectGetMinX(glasses) + 0.75635 * CGRectGetWidth(glasses), CGRectGetMinY(glasses) + 0.06273 * CGRectGetHeight(glasses)) controlPoint2: CGPointMake(CGRectGetMinX(glasses) + 0.83994 * CGRectGetWidth(glasses), CGRectGetMinY(glasses) + 0.00800 * CGRectGetHeight(glasses))];
        [shapePath addCurveToPoint: CGPointMake(CGRectGetMinX(glasses) + 0.89801 * CGRectGetWidth(glasses), CGRectGetMinY(glasses) + 0.01546 * CGRectGetHeight(glasses)) controlPoint1: CGPointMake(CGRectGetMinX(glasses) + 0.86090 * CGRectGetWidth(glasses), CGRectGetMinY(glasses) + 0.00037 * CGRectGetHeight(glasses)) controlPoint2: CGPointMake(CGRectGetMinX(glasses) + 0.87581 * CGRectGetWidth(glasses), CGRectGetMinY(glasses) + -0.00675 * CGRectGetHeight(glasses))];
        [shapePath addCurveToPoint: CGPointMake(CGRectGetMinX(glasses) + 0.94244 * CGRectGetWidth(glasses), CGRectGetMinY(glasses) + 0.51437 * CGRectGetHeight(glasses)) controlPoint1: CGPointMake(CGRectGetMinX(glasses) + 0.94076 * CGRectGetWidth(glasses), CGRectGetMinY(glasses) + 0.05821 * CGRectGetHeight(glasses)) controlPoint2: CGPointMake(CGRectGetMinX(glasses) + 1.07615 * CGRectGetWidth(glasses), CGRectGetMinY(glasses) + 0.38067 * CGRectGetHeight(glasses))];
        [shapePath addCurveToPoint: CGPointMake(CGRectGetMinX(glasses) + 0.54453 * CGRectGetWidth(glasses), CGRectGetMinY(glasses) + 0.54455 * CGRectGetHeight(glasses)) controlPoint1: CGPointMake(CGRectGetMinX(glasses) + 0.78856 * CGRectGetWidth(glasses), CGRectGetMinY(glasses) + 0.66826 * CGRectGetHeight(glasses)) controlPoint2: CGPointMake(CGRectGetMinX(glasses) + 0.61278 * CGRectGetWidth(glasses), CGRectGetMinY(glasses) + 0.47628 * CGRectGetHeight(glasses))];
        shapePath.miterLimit = 4;

        shapePath.usesEvenOddFillRule = YES;

        [orangeColor setStroke];
        shapePath.lineWidth = 2;
        [shapePath stroke];


        //// Shape 2 Drawing
        UIBezierPath* shape2Path = [UIBezierPath bezierPath];
        [shape2Path moveToPoint: CGPointMake(CGRectGetMinX(glasses) + 0.93065 * CGRectGetWidth(glasses), CGRectGetMinY(glasses) + 0.52615 * CGRectGetHeight(glasses))];
        [shape2Path addCurveToPoint: CGPointMake(CGRectGetMinX(glasses) + 0.88583 * CGRectGetWidth(glasses), CGRectGetMinY(glasses) + 0.15037 * CGRectGetHeight(glasses)) controlPoint1: CGPointMake(CGRectGetMinX(glasses) + 1.03140 * CGRectGetWidth(glasses), CGRectGetMinY(glasses) + 0.42539 * CGRectGetHeight(glasses)) controlPoint2: CGPointMake(CGRectGetMinX(glasses) + 0.94867 * CGRectGetWidth(glasses), CGRectGetMinY(glasses) + 0.21321 * CGRectGetHeight(glasses))];
        [shape2Path addCurveToPoint: CGPointMake(CGRectGetMinX(glasses) + 0.68226 * CGRectGetWidth(glasses), CGRectGetMinY(glasses) + 0.15435 * CGRectGetHeight(glasses)) controlPoint1: CGPointMake(CGRectGetMinX(glasses) + 0.85647 * CGRectGetWidth(glasses), CGRectGetMinY(glasses) + 0.12101 * CGRectGetHeight(glasses)) controlPoint2: CGPointMake(CGRectGetMinX(glasses) + 0.78065 * CGRectGetWidth(glasses), CGRectGetMinY(glasses) + 0.03776 * CGRectGetHeight(glasses))];
        shape2Path.miterLimit = 4;

        shape2Path.usesEvenOddFillRule = YES;

        [orangeColor setStroke];
        shape2Path.lineWidth = 2;
        [shape2Path stroke];


        //// Shape 3 Drawing
        UIBezierPath* shape3Path = [UIBezierPath bezierPath];
        [shape3Path moveToPoint: CGPointMake(CGRectGetMinX(glasses) + 0.67840 * CGRectGetWidth(glasses), CGRectGetMinY(glasses) + 0.15894 * CGRectGetHeight(glasses))];
        [shape3Path addCurveToPoint: CGPointMake(CGRectGetMinX(glasses) + 0.62949 * CGRectGetWidth(glasses), CGRectGetMinY(glasses) + 0.48240 * CGRectGetHeight(glasses)) controlPoint1: CGPointMake(CGRectGetMinX(glasses) + 0.58765 * CGRectGetWidth(glasses), CGRectGetMinY(glasses) + 0.26787 * CGRectGetHeight(glasses)) controlPoint2: CGPointMake(CGRectGetMinX(glasses) + 0.56180 * CGRectGetWidth(glasses), CGRectGetMinY(glasses) + 0.41471 * CGRectGetHeight(glasses))];
        [shape3Path addCurveToPoint: CGPointMake(CGRectGetMinX(glasses) + 0.94904 * CGRectGetWidth(glasses), CGRectGetMinY(glasses) + 0.50774 * CGRectGetHeight(glasses)) controlPoint1: CGPointMake(CGRectGetMinX(glasses) + 0.66246 * CGRectGetWidth(glasses), CGRectGetMinY(glasses) + 0.51537 * CGRectGetHeight(glasses)) controlPoint2: CGPointMake(CGRectGetMinX(glasses) + 0.82158 * CGRectGetWidth(glasses), CGRectGetMinY(glasses) + 0.63519 * CGRectGetHeight(glasses))];
        shape3Path.miterLimit = 4;

        shape3Path.usesEvenOddFillRule = YES;

        [orangeColor setStroke];
        shape3Path.lineWidth = 2;
        [shape3Path stroke];


        //// Shape 4 Drawing
        UIBezierPath* shape4Path = [UIBezierPath bezierPath];
        [shape4Path moveToPoint: CGPointMake(CGRectGetMinX(glasses) + 0.48937 * CGRectGetWidth(glasses), CGRectGetMinY(glasses) + 0.48937 * CGRectGetHeight(glasses))];
        [shape4Path addCurveToPoint: CGPointMake(CGRectGetMinX(glasses) + 0.16203 * CGRectGetWidth(glasses), CGRectGetMinY(glasses) + 0.67592 * CGRectGetHeight(glasses)) controlPoint1: CGPointMake(CGRectGetMinX(glasses) + 0.43489 * CGRectGetWidth(glasses), CGRectGetMinY(glasses) + 0.54385 * CGRectGetHeight(glasses)) controlPoint2: CGPointMake(CGRectGetMinX(glasses) + 0.28483 * CGRectGetWidth(glasses), CGRectGetMinY(glasses) + 0.57644 * CGRectGetHeight(glasses))];
        [shape4Path addCurveToPoint: CGPointMake(CGRectGetMinX(glasses) + 0.00419 * CGRectGetWidth(glasses), CGRectGetMinY(glasses) + 0.85042 * CGRectGetHeight(glasses)) controlPoint1: CGPointMake(CGRectGetMinX(glasses) + 0.06273 * CGRectGetWidth(glasses), CGRectGetMinY(glasses) + 0.75635 * CGRectGetHeight(glasses)) controlPoint2: CGPointMake(CGRectGetMinX(glasses) + 0.00800 * CGRectGetWidth(glasses), CGRectGetMinY(glasses) + 0.83994 * CGRectGetHeight(glasses))];
        [shape4Path addCurveToPoint: CGPointMake(CGRectGetMinX(glasses) + 0.01546 * CGRectGetWidth(glasses), CGRectGetMinY(glasses) + 0.89801 * CGRectGetHeight(glasses)) controlPoint1: CGPointMake(CGRectGetMinX(glasses) + 0.00037 * CGRectGetWidth(glasses), CGRectGetMinY(glasses) + 0.86090 * CGRectGetHeight(glasses)) controlPoint2: CGPointMake(CGRectGetMinX(glasses) + -0.00675 * CGRectGetWidth(glasses), CGRectGetMinY(glasses) + 0.87581 * CGRectGetHeight(glasses))];
        [shape4Path addCurveToPoint: CGPointMake(CGRectGetMinX(glasses) + 0.51437 * CGRectGetWidth(glasses), CGRectGetMinY(glasses) + 0.94244 * CGRectGetHeight(glasses)) controlPoint1: CGPointMake(CGRectGetMinX(glasses) + 0.05821 * CGRectGetWidth(glasses), CGRectGetMinY(glasses) + 0.94076 * CGRectGetHeight(glasses)) controlPoint2: CGPointMake(CGRectGetMinX(glasses) + 0.38067 * CGRectGetWidth(glasses), CGRectGetMinY(glasses) + 1.07615 * CGRectGetHeight(glasses))];
        [shape4Path addCurveToPoint: CGPointMake(CGRectGetMinX(glasses) + 0.54455 * CGRectGetWidth(glasses), CGRectGetMinY(glasses) + 0.54453 * CGRectGetHeight(glasses)) controlPoint1: CGPointMake(CGRectGetMinX(glasses) + 0.66826 * CGRectGetWidth(glasses), CGRectGetMinY(glasses) + 0.78856 * CGRectGetHeight(glasses)) controlPoint2: CGPointMake(CGRectGetMinX(glasses) + 0.47628 * CGRectGetWidth(glasses), CGRectGetMinY(glasses) + 0.61278 * CGRectGetHeight(glasses))];
        shape4Path.miterLimit = 4;

        shape4Path.usesEvenOddFillRule = YES;

        [orangeColor setStroke];
        shape4Path.lineWidth = 2;
        [shape4Path stroke];


        //// Shape 5 Drawing
        UIBezierPath* shape5Path = [UIBezierPath bezierPath];
        [shape5Path moveToPoint: CGPointMake(CGRectGetMinX(glasses) + 0.52615 * CGRectGetWidth(glasses), CGRectGetMinY(glasses) + 0.93065 * CGRectGetHeight(glasses))];
        [shape5Path addCurveToPoint: CGPointMake(CGRectGetMinX(glasses) + 0.15037 * CGRectGetWidth(glasses), CGRectGetMinY(glasses) + 0.88583 * CGRectGetHeight(glasses)) controlPoint1: CGPointMake(CGRectGetMinX(glasses) + 0.42539 * CGRectGetWidth(glasses), CGRectGetMinY(glasses) + 1.03140 * CGRectGetHeight(glasses)) controlPoint2: CGPointMake(CGRectGetMinX(glasses) + 0.21321 * CGRectGetWidth(glasses), CGRectGetMinY(glasses) + 0.94867 * CGRectGetHeight(glasses))];
        [shape5Path addCurveToPoint: CGPointMake(CGRectGetMinX(glasses) + 0.15435 * CGRectGetWidth(glasses), CGRectGetMinY(glasses) + 0.68226 * CGRectGetHeight(glasses)) controlPoint1: CGPointMake(CGRectGetMinX(glasses) + 0.12101 * CGRectGetWidth(glasses), CGRectGetMinY(glasses) + 0.85647 * CGRectGetHeight(glasses)) controlPoint2: CGPointMake(CGRectGetMinX(glasses) + 0.03776 * CGRectGetWidth(glasses), CGRectGetMinY(glasses) + 0.78065 * CGRectGetHeight(glasses))];
        shape5Path.miterLimit = 4;

        shape5Path.usesEvenOddFillRule = YES;

        [orangeColor setStroke];
        shape5Path.lineWidth = 2;
        [shape5Path stroke];


        //// Shape 6 Drawing
        UIBezierPath* shape6Path = [UIBezierPath bezierPath];
        [shape6Path moveToPoint: CGPointMake(CGRectGetMinX(glasses) + 0.15894 * CGRectGetWidth(glasses), CGRectGetMinY(glasses) + 0.67840 * CGRectGetHeight(glasses))];
        [shape6Path addCurveToPoint: CGPointMake(CGRectGetMinX(glasses) + 0.48240 * CGRectGetWidth(glasses), CGRectGetMinY(glasses) + 0.62949 * CGRectGetHeight(glasses)) controlPoint1: CGPointMake(CGRectGetMinX(glasses) + 0.26787 * CGRectGetWidth(glasses), CGRectGetMinY(glasses) + 0.58765 * CGRectGetHeight(glasses)) controlPoint2: CGPointMake(CGRectGetMinX(glasses) + 0.41471 * CGRectGetWidth(glasses), CGRectGetMinY(glasses) + 0.56180 * CGRectGetHeight(glasses))];
        [shape6Path addCurveToPoint: CGPointMake(CGRectGetMinX(glasses) + 0.50774 * CGRectGetWidth(glasses), CGRectGetMinY(glasses) + 0.94904 * CGRectGetHeight(glasses)) controlPoint1: CGPointMake(CGRectGetMinX(glasses) + 0.51537 * CGRectGetWidth(glasses), CGRectGetMinY(glasses) + 0.66246 * CGRectGetHeight(glasses)) controlPoint2: CGPointMake(CGRectGetMinX(glasses) + 0.63519 * CGRectGetWidth(glasses), CGRectGetMinY(glasses) + 0.82158 * CGRectGetHeight(glasses))];
        shape6Path.miterLimit = 4;

        shape6Path.usesEvenOddFillRule = YES;

        [orangeColor setStroke];
        shape6Path.lineWidth = 2;
        [shape6Path stroke];
    }
}

+ (void)drawBagIconWithRect: (CGRect)rect
{
    //// Color Declarations
    UIColor* orangeColor = [UIColor colorWithRed: 1 green: 0.408 blue: 0.086 alpha: 1];

    //// Variable Declarations
    CGFloat smallestSide = MIN(rect.size.height, rect.size.width);
    CGPoint position = CGPointMake(rect.origin.x + (rect.size.width - smallestSide) * 0.5, rect.origin.y + (rect.size.height - smallestSide) * 0.5);

    //// Frames
    CGRect frame = CGRectMake(position.x, position.y, smallestSide, smallestSide);

    //// Subframes
    CGRect bag = CGRectMake(CGRectGetMinX(frame) + floor(CGRectGetWidth(frame) * 0.02610 + 0.11) + 0.39, CGRectGetMinY(frame) + floor(CGRectGetHeight(frame) * 0.04828 + 0.02) + 0.48, floor(CGRectGetWidth(frame) * 0.96957 + 0.46) - floor(CGRectGetWidth(frame) * 0.02610 + 0.11) - 0.35, floor(CGRectGetHeight(frame) * 0.95012 - 0.22) - floor(CGRectGetHeight(frame) * 0.04828 + 0.02) + 0.24);


    //// Bag
    {
        //// Stroke-1 Drawing
        UIBezierPath* stroke1Path = [UIBezierPath bezierPath];
        [stroke1Path moveToPoint: CGPointMake(CGRectGetMinX(bag) + 0.28261 * CGRectGetWidth(bag), CGRectGetMinY(bag) + 0.47826 * CGRectGetHeight(bag))];
        [stroke1Path addLineToPoint: CGPointMake(CGRectGetMinX(bag) + 0.28261 * CGRectGetWidth(bag), CGRectGetMinY(bag) + 0.21739 * CGRectGetHeight(bag))];
        [stroke1Path addCurveToPoint: CGPointMake(CGRectGetMinX(bag) + 0.50000 * CGRectGetWidth(bag), CGRectGetMinY(bag) + 0.00000 * CGRectGetHeight(bag)) controlPoint1: CGPointMake(CGRectGetMinX(bag) + 0.28261 * CGRectGetWidth(bag), CGRectGetMinY(bag) + 0.09730 * CGRectGetHeight(bag)) controlPoint2: CGPointMake(CGRectGetMinX(bag) + 0.37991 * CGRectGetWidth(bag), CGRectGetMinY(bag) + 0.00000 * CGRectGetHeight(bag))];
        [stroke1Path addCurveToPoint: CGPointMake(CGRectGetMinX(bag) + 0.71739 * CGRectGetWidth(bag), CGRectGetMinY(bag) + 0.21739 * CGRectGetHeight(bag)) controlPoint1: CGPointMake(CGRectGetMinX(bag) + 0.62004 * CGRectGetWidth(bag), CGRectGetMinY(bag) + 0.00000 * CGRectGetHeight(bag)) controlPoint2: CGPointMake(CGRectGetMinX(bag) + 0.71739 * CGRectGetWidth(bag), CGRectGetMinY(bag) + 0.09730 * CGRectGetHeight(bag))];
        [stroke1Path addLineToPoint: CGPointMake(CGRectGetMinX(bag) + 0.71739 * CGRectGetWidth(bag), CGRectGetMinY(bag) + 0.47826 * CGRectGetHeight(bag))];
        stroke1Path.miterLimit = 4;

        stroke1Path.lineCapStyle = kCGLineCapSquare;

        stroke1Path.usesEvenOddFillRule = YES;

        [orangeColor setStroke];
        stroke1Path.lineWidth = 2;
        [stroke1Path stroke];


        //// Stroke-3 Drawing
        UIBezierPath* stroke3Path = [UIBezierPath bezierPath];
        [stroke3Path moveToPoint: CGPointMake(CGRectGetMinX(bag) + 1.00000 * CGRectGetWidth(bag), CGRectGetMinY(bag) + 0.58696 * CGRectGetHeight(bag))];
        [stroke3Path addCurveToPoint: CGPointMake(CGRectGetMinX(bag) + 0.80435 * CGRectGetWidth(bag), CGRectGetMinY(bag) + 0.39130 * CGRectGetHeight(bag)) controlPoint1: CGPointMake(CGRectGetMinX(bag) + 1.00000 * CGRectGetWidth(bag), CGRectGetMinY(bag) + 0.47887 * CGRectGetHeight(bag)) controlPoint2: CGPointMake(CGRectGetMinX(bag) + 0.91239 * CGRectGetWidth(bag), CGRectGetMinY(bag) + 0.39130 * CGRectGetHeight(bag))];
        [stroke3Path addLineToPoint: CGPointMake(CGRectGetMinX(bag) + 0.19565 * CGRectGetWidth(bag), CGRectGetMinY(bag) + 0.39130 * CGRectGetHeight(bag))];
        [stroke3Path addCurveToPoint: CGPointMake(CGRectGetMinX(bag) + 0.00000 * CGRectGetWidth(bag), CGRectGetMinY(bag) + 0.58696 * CGRectGetHeight(bag)) controlPoint1: CGPointMake(CGRectGetMinX(bag) + 0.08761 * CGRectGetWidth(bag), CGRectGetMinY(bag) + 0.39130 * CGRectGetHeight(bag)) controlPoint2: CGPointMake(CGRectGetMinX(bag) + 0.00000 * CGRectGetWidth(bag), CGRectGetMinY(bag) + 0.47887 * CGRectGetHeight(bag))];
        [stroke3Path addLineToPoint: CGPointMake(CGRectGetMinX(bag) + 0.00000 * CGRectGetWidth(bag), CGRectGetMinY(bag) + 0.86957 * CGRectGetHeight(bag))];
        [stroke3Path addCurveToPoint: CGPointMake(CGRectGetMinX(bag) + 0.13043 * CGRectGetWidth(bag), CGRectGetMinY(bag) + 1.00000 * CGRectGetHeight(bag)) controlPoint1: CGPointMake(CGRectGetMinX(bag) + 0.00000 * CGRectGetWidth(bag), CGRectGetMinY(bag) + 0.94157 * CGRectGetHeight(bag)) controlPoint2: CGPointMake(CGRectGetMinX(bag) + 0.05839 * CGRectGetWidth(bag), CGRectGetMinY(bag) + 1.00000 * CGRectGetHeight(bag))];
        [stroke3Path addLineToPoint: CGPointMake(CGRectGetMinX(bag) + 0.86957 * CGRectGetWidth(bag), CGRectGetMinY(bag) + 1.00000 * CGRectGetHeight(bag))];
        [stroke3Path addCurveToPoint: CGPointMake(CGRectGetMinX(bag) + 1.00000 * CGRectGetWidth(bag), CGRectGetMinY(bag) + 0.86957 * CGRectGetHeight(bag)) controlPoint1: CGPointMake(CGRectGetMinX(bag) + 0.94161 * CGRectGetWidth(bag), CGRectGetMinY(bag) + 1.00000 * CGRectGetHeight(bag)) controlPoint2: CGPointMake(CGRectGetMinX(bag) + 1.00000 * CGRectGetWidth(bag), CGRectGetMinY(bag) + 0.94157 * CGRectGetHeight(bag))];
        [stroke3Path addLineToPoint: CGPointMake(CGRectGetMinX(bag) + 1.00000 * CGRectGetWidth(bag), CGRectGetMinY(bag) + 0.58696 * CGRectGetHeight(bag))];
        [stroke3Path addLineToPoint: CGPointMake(CGRectGetMinX(bag) + 1.00000 * CGRectGetWidth(bag), CGRectGetMinY(bag) + 0.58696 * CGRectGetHeight(bag))];
        [stroke3Path closePath];
        stroke3Path.miterLimit = 4;

        stroke3Path.lineCapStyle = kCGLineCapSquare;

        stroke3Path.usesEvenOddFillRule = YES;

        [orangeColor setStroke];
        stroke3Path.lineWidth = 2;
        [stroke3Path stroke];


        //// Stroke-5 Drawing
        UIBezierPath* stroke5Path = [UIBezierPath bezierPath];
        [stroke5Path moveToPoint: CGPointMake(CGRectGetMinX(bag) + 0.21739 * CGRectGetWidth(bag), CGRectGetMinY(bag) + 1.00000 * CGRectGetHeight(bag))];
        [stroke5Path addCurveToPoint: CGPointMake(CGRectGetMinX(bag) + 0.00000 * CGRectGetWidth(bag), CGRectGetMinY(bag) + 0.78261 * CGRectGetHeight(bag)) controlPoint1: CGPointMake(CGRectGetMinX(bag) + 0.21739 * CGRectGetWidth(bag), CGRectGetMinY(bag) + 0.87991 * CGRectGetHeight(bag)) controlPoint2: CGPointMake(CGRectGetMinX(bag) + 0.12004 * CGRectGetWidth(bag), CGRectGetMinY(bag) + 0.78261 * CGRectGetHeight(bag))];
        stroke5Path.miterLimit = 4;

        stroke5Path.lineCapStyle = kCGLineCapSquare;

        stroke5Path.usesEvenOddFillRule = YES;

        [orangeColor setStroke];
        stroke5Path.lineWidth = 2;
        [stroke5Path stroke];


        //// Stroke-7 Drawing
        UIBezierPath* stroke7Path = [UIBezierPath bezierPath];
        [stroke7Path moveToPoint: CGPointMake(CGRectGetMinX(bag) + 0.78261 * CGRectGetWidth(bag), CGRectGetMinY(bag) + 1.00000 * CGRectGetHeight(bag))];
        [stroke7Path addCurveToPoint: CGPointMake(CGRectGetMinX(bag) + 1.00000 * CGRectGetWidth(bag), CGRectGetMinY(bag) + 0.78261 * CGRectGetHeight(bag)) controlPoint1: CGPointMake(CGRectGetMinX(bag) + 0.78261 * CGRectGetWidth(bag), CGRectGetMinY(bag) + 0.87991 * CGRectGetHeight(bag)) controlPoint2: CGPointMake(CGRectGetMinX(bag) + 0.87991 * CGRectGetWidth(bag), CGRectGetMinY(bag) + 0.78261 * CGRectGetHeight(bag))];
        stroke7Path.miterLimit = 4;

        stroke7Path.lineCapStyle = kCGLineCapSquare;

        stroke7Path.usesEvenOddFillRule = YES;

        [orangeColor setStroke];
        stroke7Path.lineWidth = 2;
        [stroke7Path stroke];


        //// Stroke-9 Drawing
        UIBezierPath* stroke9Path = [UIBezierPath bezierPath];
        [stroke9Path moveToPoint: CGPointMake(CGRectGetMinX(bag) + 0.91304 * CGRectGetWidth(bag), CGRectGetMinY(bag) + 0.59860 * CGRectGetHeight(bag))];
        [stroke9Path addLineToPoint: CGPointMake(CGRectGetMinX(bag) + 0.08696 * CGRectGetWidth(bag), CGRectGetMinY(bag) + 0.59860 * CGRectGetHeight(bag))];
        stroke9Path.miterLimit = 4;

        stroke9Path.lineCapStyle = kCGLineCapSquare;

        stroke9Path.usesEvenOddFillRule = YES;

        [orangeColor setStroke];
        stroke9Path.lineWidth = 2;
        [stroke9Path stroke];


        //// Stroke-11 Drawing
        UIBezierPath* stroke11Path = [UIBezierPath bezierPath];
        [stroke11Path moveToPoint: CGPointMake(CGRectGetMinX(bag) + 0.16356 * CGRectGetWidth(bag), CGRectGetMinY(bag) + 0.67391 * CGRectGetHeight(bag))];
        [stroke11Path addLineToPoint: CGPointMake(CGRectGetMinX(bag) + 0.16356 * CGRectGetWidth(bag), CGRectGetMinY(bag) + 0.71739 * CGRectGetHeight(bag))];
        stroke11Path.miterLimit = 4;

        stroke11Path.lineCapStyle = kCGLineCapSquare;

        stroke11Path.usesEvenOddFillRule = YES;

        [orangeColor setStroke];
        stroke11Path.lineWidth = 2;
        [stroke11Path stroke];
    }
}

+ (void)drawCoatIconWithRect: (CGRect)rect
{
    //// Color Declarations
    UIColor* orangeColor = [UIColor colorWithRed: 1 green: 0.408 blue: 0.086 alpha: 1];

    //// Variable Declarations
    CGFloat smallestSide = MIN(rect.size.height, rect.size.width);
    CGPoint position = CGPointMake(rect.origin.x + (rect.size.width - smallestSide) * 0.5, rect.origin.y + (rect.size.height - smallestSide) * 0.5);

    //// Frames
    CGRect frame = CGRectMake(position.x, position.y, smallestSide, smallestSide);

    //// Subframes
    CGRect coat = CGRectMake(CGRectGetMinX(frame) + floor(CGRectGetWidth(frame) * 0.00769 + 0.5), CGRectGetMinY(frame) + floor(CGRectGetHeight(frame) * 0.00769 + 0.5), floor(CGRectGetWidth(frame) * 0.99231 + 0.5) - floor(CGRectGetWidth(frame) * 0.00769 + 0.5), floor(CGRectGetHeight(frame) * 0.99231 + 0.5) - floor(CGRectGetHeight(frame) * 0.00769 + 0.5));


    //// Coat
    {
        //// Shape Drawing
        UIBezierPath* shapePath = [UIBezierPath bezierPath];
        [shapePath moveToPoint: CGPointMake(CGRectGetMinX(coat) + 0.76923 * CGRectGetWidth(coat), CGRectGetMinY(coat) + 0.40998 * CGRectGetHeight(coat))];
        [shapePath addCurveToPoint: CGPointMake(CGRectGetMinX(coat) + 0.85417 * CGRectGetWidth(coat), CGRectGetMinY(coat) + 0.60417 * CGRectGetHeight(coat)) controlPoint1: CGPointMake(CGRectGetMinX(coat) + 0.76923 * CGRectGetWidth(coat), CGRectGetMinY(coat) + 0.40998 * CGRectGetHeight(coat)) controlPoint2: CGPointMake(CGRectGetMinX(coat) + 0.85417 * CGRectGetWidth(coat), CGRectGetMinY(coat) + 0.57892 * CGRectGetHeight(coat))];
        [shapePath addLineToPoint: CGPointMake(CGRectGetMinX(coat) + 0.85417 * CGRectGetWidth(coat), CGRectGetMinY(coat) + 0.85417 * CGRectGetHeight(coat))];
        [shapePath addLineToPoint: CGPointMake(CGRectGetMinX(coat) + 1.00000 * CGRectGetWidth(coat), CGRectGetMinY(coat) + 0.85417 * CGRectGetHeight(coat))];
        [shapePath addLineToPoint: CGPointMake(CGRectGetMinX(coat) + 1.00000 * CGRectGetWidth(coat), CGRectGetMinY(coat) + 0.53319 * CGRectGetHeight(coat))];
        [shapePath addCurveToPoint: CGPointMake(CGRectGetMinX(coat) + 0.89821 * CGRectGetWidth(coat), CGRectGetMinY(coat) + 0.25160 * CGRectGetHeight(coat)) controlPoint1: CGPointMake(CGRectGetMinX(coat) + 1.00000 * CGRectGetWidth(coat), CGRectGetMinY(coat) + 0.49277 * CGRectGetHeight(coat)) controlPoint2: CGPointMake(CGRectGetMinX(coat) + 0.90910 * CGRectGetWidth(coat), CGRectGetMinY(coat) + 0.29531 * CGRectGetHeight(coat))];
        [shapePath addCurveToPoint: CGPointMake(CGRectGetMinX(coat) + 0.77094 * CGRectGetWidth(coat), CGRectGetMinY(coat) + 0.09852 * CGRectGetHeight(coat)) controlPoint1: CGPointMake(CGRectGetMinX(coat) + 0.87331 * CGRectGetWidth(coat), CGRectGetMinY(coat) + 0.15204 * CGRectGetHeight(coat)) controlPoint2: CGPointMake(CGRectGetMinX(coat) + 0.77094 * CGRectGetWidth(coat), CGRectGetMinY(coat) + 0.09852 * CGRectGetHeight(coat))];
        shapePath.miterLimit = 4;

        shapePath.usesEvenOddFillRule = YES;

        [orangeColor setStroke];
        shapePath.lineWidth = 2;
        [shapePath stroke];


        //// Shape 2 Drawing
        UIBezierPath* shape2Path = [UIBezierPath bezierPath];
        [shape2Path moveToPoint: CGPointMake(CGRectGetMinX(coat) + 0.23077 * CGRectGetWidth(coat), CGRectGetMinY(coat) + 0.40998 * CGRectGetHeight(coat))];
        [shape2Path addCurveToPoint: CGPointMake(CGRectGetMinX(coat) + 0.14583 * CGRectGetWidth(coat), CGRectGetMinY(coat) + 0.60417 * CGRectGetHeight(coat)) controlPoint1: CGPointMake(CGRectGetMinX(coat) + 0.23077 * CGRectGetWidth(coat), CGRectGetMinY(coat) + 0.40998 * CGRectGetHeight(coat)) controlPoint2: CGPointMake(CGRectGetMinX(coat) + 0.14583 * CGRectGetWidth(coat), CGRectGetMinY(coat) + 0.57892 * CGRectGetHeight(coat))];
        [shape2Path addLineToPoint: CGPointMake(CGRectGetMinX(coat) + 0.14583 * CGRectGetWidth(coat), CGRectGetMinY(coat) + 0.85417 * CGRectGetHeight(coat))];
        [shape2Path addLineToPoint: CGPointMake(CGRectGetMinX(coat) + 0.00000 * CGRectGetWidth(coat), CGRectGetMinY(coat) + 0.85417 * CGRectGetHeight(coat))];
        [shape2Path addLineToPoint: CGPointMake(CGRectGetMinX(coat) + 0.00000 * CGRectGetWidth(coat), CGRectGetMinY(coat) + 0.53319 * CGRectGetHeight(coat))];
        [shape2Path addCurveToPoint: CGPointMake(CGRectGetMinX(coat) + 0.10179 * CGRectGetWidth(coat), CGRectGetMinY(coat) + 0.25160 * CGRectGetHeight(coat)) controlPoint1: CGPointMake(CGRectGetMinX(coat) + 0.00000 * CGRectGetWidth(coat), CGRectGetMinY(coat) + 0.49277 * CGRectGetHeight(coat)) controlPoint2: CGPointMake(CGRectGetMinX(coat) + 0.09090 * CGRectGetWidth(coat), CGRectGetMinY(coat) + 0.29531 * CGRectGetHeight(coat))];
        [shape2Path addCurveToPoint: CGPointMake(CGRectGetMinX(coat) + 0.22969 * CGRectGetWidth(coat), CGRectGetMinY(coat) + 0.09852 * CGRectGetHeight(coat)) controlPoint1: CGPointMake(CGRectGetMinX(coat) + 0.12669 * CGRectGetWidth(coat), CGRectGetMinY(coat) + 0.15204 * CGRectGetHeight(coat)) controlPoint2: CGPointMake(CGRectGetMinX(coat) + 0.22969 * CGRectGetWidth(coat), CGRectGetMinY(coat) + 0.09852 * CGRectGetHeight(coat))];
        shape2Path.miterLimit = 4;

        shape2Path.usesEvenOddFillRule = YES;

        [orangeColor setStroke];
        shape2Path.lineWidth = 2;
        [shape2Path stroke];


        //// Shape 3 Drawing
        UIBezierPath* shape3Path = [UIBezierPath bezierPath];
        [shape3Path moveToPoint: CGPointMake(CGRectGetMinX(coat) + 0.67596 * CGRectGetWidth(coat), CGRectGetMinY(coat) + 0.06921 * CGRectGetHeight(coat))];
        [shape3Path addLineToPoint: CGPointMake(CGRectGetMinX(coat) + 0.62500 * CGRectGetWidth(coat), CGRectGetMinY(coat) + 0.02083 * CGRectGetHeight(coat))];
        [shape3Path addLineToPoint: CGPointMake(CGRectGetMinX(coat) + 0.50000 * CGRectGetWidth(coat), CGRectGetMinY(coat) + 0.20336 * CGRectGetHeight(coat))];
        [shape3Path addLineToPoint: CGPointMake(CGRectGetMinX(coat) + 0.37500 * CGRectGetWidth(coat), CGRectGetMinY(coat) + 0.02083 * CGRectGetHeight(coat))];
        [shape3Path addLineToPoint: CGPointMake(CGRectGetMinX(coat) + 0.32479 * CGRectGetWidth(coat), CGRectGetMinY(coat) + 0.06906 * CGRectGetHeight(coat))];
        [shape3Path addLineToPoint: CGPointMake(CGRectGetMinX(coat) + 0.23077 * CGRectGetWidth(coat), CGRectGetMinY(coat) + 0.09775 * CGRectGetHeight(coat))];
        [shape3Path addCurveToPoint: CGPointMake(CGRectGetMinX(coat) + 0.23077 * CGRectGetWidth(coat), CGRectGetMinY(coat) + 0.40544 * CGRectGetHeight(coat)) controlPoint1: CGPointMake(CGRectGetMinX(coat) + 0.23077 * CGRectGetWidth(coat), CGRectGetMinY(coat) + 0.09775 * CGRectGetHeight(coat)) controlPoint2: CGPointMake(CGRectGetMinX(coat) + 0.26377 * CGRectGetWidth(coat), CGRectGetMinY(coat) + 0.27469 * CGRectGetHeight(coat))];
        [shape3Path addLineToPoint: CGPointMake(CGRectGetMinX(coat) + 0.23077 * CGRectGetWidth(coat), CGRectGetMinY(coat) + 1.00000 * CGRectGetHeight(coat))];
        [shape3Path addLineToPoint: CGPointMake(CGRectGetMinX(coat) + 0.76923 * CGRectGetWidth(coat), CGRectGetMinY(coat) + 1.00000 * CGRectGetHeight(coat))];
        [shape3Path addLineToPoint: CGPointMake(CGRectGetMinX(coat) + 0.76923 * CGRectGetWidth(coat), CGRectGetMinY(coat) + 0.52535 * CGRectGetHeight(coat))];
        [shape3Path addLineToPoint: CGPointMake(CGRectGetMinX(coat) + 0.76923 * CGRectGetWidth(coat), CGRectGetMinY(coat) + 0.40998 * CGRectGetHeight(coat))];
        [shape3Path addCurveToPoint: CGPointMake(CGRectGetMinX(coat) + 0.76923 * CGRectGetWidth(coat), CGRectGetMinY(coat) + 0.09775 * CGRectGetHeight(coat)) controlPoint1: CGPointMake(CGRectGetMinX(coat) + 0.73671 * CGRectGetWidth(coat), CGRectGetMinY(coat) + 0.23417 * CGRectGetHeight(coat)) controlPoint2: CGPointMake(CGRectGetMinX(coat) + 0.76923 * CGRectGetWidth(coat), CGRectGetMinY(coat) + 0.09775 * CGRectGetHeight(coat))];
        [shape3Path addLineToPoint: CGPointMake(CGRectGetMinX(coat) + 0.67596 * CGRectGetWidth(coat), CGRectGetMinY(coat) + 0.06921 * CGRectGetHeight(coat))];
        [shape3Path closePath];
        shape3Path.miterLimit = 4;

        shape3Path.usesEvenOddFillRule = YES;

        [orangeColor setStroke];
        shape3Path.lineWidth = 2;
        [shape3Path stroke];


        //// Shape 4 Drawing
        UIBezierPath* shape4Path = [UIBezierPath bezierPath];
        [shape4Path moveToPoint: CGPointMake(CGRectGetMinX(coat) + 0.37656 * CGRectGetWidth(coat), CGRectGetMinY(coat) + 0.01859 * CGRectGetHeight(coat))];
        [shape4Path addCurveToPoint: CGPointMake(CGRectGetMinX(coat) + 0.50000 * CGRectGetWidth(coat), CGRectGetMinY(coat) + 0.00000 * CGRectGetHeight(coat)) controlPoint1: CGPointMake(CGRectGetMinX(coat) + 0.37656 * CGRectGetWidth(coat), CGRectGetMinY(coat) + 0.01859 * CGRectGetHeight(coat)) controlPoint2: CGPointMake(CGRectGetMinX(coat) + 0.41917 * CGRectGetWidth(coat), CGRectGetMinY(coat) + 0.00000 * CGRectGetHeight(coat))];
        [shape4Path addCurveToPoint: CGPointMake(CGRectGetMinX(coat) + 0.62328 * CGRectGetWidth(coat), CGRectGetMinY(coat) + 0.01859 * CGRectGetHeight(coat)) controlPoint1: CGPointMake(CGRectGetMinX(coat) + 0.58083 * CGRectGetWidth(coat), CGRectGetMinY(coat) + 0.00000 * CGRectGetHeight(coat)) controlPoint2: CGPointMake(CGRectGetMinX(coat) + 0.62328 * CGRectGetWidth(coat), CGRectGetMinY(coat) + 0.01859 * CGRectGetHeight(coat))];
        shape4Path.miterLimit = 4;

        shape4Path.usesEvenOddFillRule = YES;

        [orangeColor setStroke];
        shape4Path.lineWidth = 2;
        [shape4Path stroke];


        //// Oval 2 Drawing
        UIBezierPath* oval2Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(CGRectGetMinX(coat) + floor(CGRectGetWidth(coat) * 0.56252 + 0.5) + 0, CGRectGetMinY(coat) + floor(CGRectGetHeight(coat) * 0.41667 - 0.5) + 1, floor(CGRectGetWidth(coat) * 0.64585 - 0.17) - floor(CGRectGetWidth(coat) * 0.56252 + 0.5) + 0.67, floor(CGRectGetHeight(coat) * 0.50000 - 0.17) - floor(CGRectGetHeight(coat) * 0.41667 - 0.5) - 0.33)];
        [orangeColor setStroke];
        oval2Path.lineWidth = 2;
        [oval2Path stroke];


        //// Oval 4 Drawing
        UIBezierPath* oval4Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(CGRectGetMinX(coat) + floor(CGRectGetWidth(coat) * 0.56252 + 0.5) + 0, CGRectGetMinY(coat) + floor(CGRectGetHeight(coat) * 0.58333 - 0.17) + 0.67, floor(CGRectGetWidth(coat) * 0.64585 - 0.17) - floor(CGRectGetWidth(coat) * 0.56252 + 0.5) + 0.67, floor(CGRectGetHeight(coat) * 0.66667 + 0.17) - floor(CGRectGetHeight(coat) * 0.58333 - 0.17) - 0.33)];
        [orangeColor setStroke];
        oval4Path.lineWidth = 2;
        [oval4Path stroke];


        //// Oval 6 Drawing
        UIBezierPath* oval6Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(CGRectGetMinX(coat) + floor(CGRectGetWidth(coat) * 0.56252 + 0.5) + 0, CGRectGetMinY(coat) + floor(CGRectGetHeight(coat) * 0.75000 + 0.17) + 0.33, floor(CGRectGetWidth(coat) * 0.64585 - 0.17) - floor(CGRectGetWidth(coat) * 0.56252 + 0.5) + 0.67, floor(CGRectGetHeight(coat) * 0.83333 + 0.5) - floor(CGRectGetHeight(coat) * 0.75000 + 0.17) - 0.33)];
        [orangeColor setStroke];
        oval6Path.lineWidth = 2;
        [oval6Path stroke];


        //// Oval 8 Drawing
        UIBezierPath* oval8Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(CGRectGetMinX(coat) + floor(CGRectGetWidth(coat) * 0.37502 + 0.5) + 0, CGRectGetMinY(coat) + floor(CGRectGetHeight(coat) * 0.41667 - 0.5) + 1, floor(CGRectGetWidth(coat) * 0.45835 - 0.17) - floor(CGRectGetWidth(coat) * 0.37502 + 0.5) + 0.67, floor(CGRectGetHeight(coat) * 0.50000 - 0.17) - floor(CGRectGetHeight(coat) * 0.41667 - 0.5) - 0.33)];
        [orangeColor setStroke];
        oval8Path.lineWidth = 2;
        [oval8Path stroke];


        //// Oval 10 Drawing
        UIBezierPath* oval10Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(CGRectGetMinX(coat) + floor(CGRectGetWidth(coat) * 0.37502 + 0.5) + 0, CGRectGetMinY(coat) + floor(CGRectGetHeight(coat) * 0.58333 - 0.17) + 0.67, floor(CGRectGetWidth(coat) * 0.45835 - 0.17) - floor(CGRectGetWidth(coat) * 0.37502 + 0.5) + 0.67, floor(CGRectGetHeight(coat) * 0.66667 + 0.17) - floor(CGRectGetHeight(coat) * 0.58333 - 0.17) - 0.33)];
        [orangeColor setStroke];
        oval10Path.lineWidth = 2;
        [oval10Path stroke];


        //// Oval 12 Drawing
        UIBezierPath* oval12Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(CGRectGetMinX(coat) + floor(CGRectGetWidth(coat) * 0.37502 + 0.5) + 0, CGRectGetMinY(coat) + floor(CGRectGetHeight(coat) * 0.75000 + 0.17) + 0.33, floor(CGRectGetWidth(coat) * 0.45835 - 0.17) - floor(CGRectGetWidth(coat) * 0.37502 + 0.5) + 0.67, floor(CGRectGetHeight(coat) * 0.83333 + 0.5) - floor(CGRectGetHeight(coat) * 0.75000 + 0.17) - 0.33)];
        [orangeColor setStroke];
        oval12Path.lineWidth = 2;
        [oval12Path stroke];


        //// Shape 5 Drawing
        UIBezierPath* shape5Path = [UIBezierPath bezierPath];
        [shape5Path moveToPoint: CGPointMake(CGRectGetMinX(coat) + 0.50000 * CGRectGetWidth(coat), CGRectGetMinY(coat) + 0.20833 * CGRectGetHeight(coat))];
        [shape5Path addLineToPoint: CGPointMake(CGRectGetMinX(coat) + 0.62500 * CGRectGetWidth(coat), CGRectGetMinY(coat) + 0.27083 * CGRectGetHeight(coat))];
        [shape5Path addLineToPoint: CGPointMake(CGRectGetMinX(coat) + 0.67596 * CGRectGetWidth(coat), CGRectGetMinY(coat) + 0.06921 * CGRectGetHeight(coat))];
        shape5Path.miterLimit = 4;

        shape5Path.usesEvenOddFillRule = YES;

        [orangeColor setStroke];
        shape5Path.lineWidth = 2;
        [shape5Path stroke];


        //// Shape 6 Drawing
        UIBezierPath* shape6Path = [UIBezierPath bezierPath];
        [shape6Path moveToPoint: CGPointMake(CGRectGetMinX(coat) + 0.50000 * CGRectGetWidth(coat), CGRectGetMinY(coat) + 0.20833 * CGRectGetHeight(coat))];
        [shape6Path addLineToPoint: CGPointMake(CGRectGetMinX(coat) + 0.37500 * CGRectGetWidth(coat), CGRectGetMinY(coat) + 0.27083 * CGRectGetHeight(coat))];
        [shape6Path addLineToPoint: CGPointMake(CGRectGetMinX(coat) + 0.32404 * CGRectGetWidth(coat), CGRectGetMinY(coat) + 0.06921 * CGRectGetHeight(coat))];
        shape6Path.miterLimit = 4;

        shape6Path.usesEvenOddFillRule = YES;

        [orangeColor setStroke];
        shape6Path.lineWidth = 2;
        [shape6Path stroke];
    }
}

+ (void)drawKnittingIconWithRect: (CGRect)rect
{
    //// Color Declarations
    UIColor* orangeColor = [UIColor colorWithRed: 1 green: 0.408 blue: 0.086 alpha: 1];

    //// Variable Declarations
    CGFloat smallestSide = MIN(rect.size.height, rect.size.width);
    CGPoint position = CGPointMake(rect.origin.x + (rect.size.width - smallestSide) * 0.5, rect.origin.y + (rect.size.height - smallestSide) * 0.5);

    //// Frames
    CGRect frame = CGRectMake(position.x, position.y, smallestSide, smallestSide);

    //// Subframes
    CGRect knitting = CGRectMake(CGRectGetMinX(frame) + floor(CGRectGetWidth(frame) * 0.03846 + 0.5), CGRectGetMinY(frame) + floor(CGRectGetHeight(frame) * 0.04531 - 0.39) + 0.89, floor(CGRectGetWidth(frame) * 0.96154 - 0.5) - floor(CGRectGetWidth(frame) * 0.03846 + 0.5) + 1, floor(CGRectGetHeight(frame) * 0.95470 + 0.39) - floor(CGRectGetHeight(frame) * 0.04531 - 0.39) - 0.78);


    //// Knitting
    {
        //// Layer_1
        {
            //// Oval-213 Drawing
            UIBezierPath* oval213Path = [UIBezierPath bezierPath];
            [oval213Path moveToPoint: CGPointMake(CGRectGetMinX(knitting) + 0.82580 * CGRectGetWidth(knitting), CGRectGetMinY(knitting) + 0.83463 * CGRectGetHeight(knitting))];
            [oval213Path addCurveToPoint: CGPointMake(CGRectGetMinX(knitting) + 0.95833 * CGRectGetWidth(knitting), CGRectGetMinY(knitting) + 0.50741 * CGRectGetHeight(knitting)) controlPoint1: CGPointMake(CGRectGetMinX(knitting) + 0.90774 * CGRectGetWidth(knitting), CGRectGetMinY(knitting) + 0.75058 * CGRectGetHeight(knitting)) controlPoint2: CGPointMake(CGRectGetMinX(knitting) + 0.95833 * CGRectGetWidth(knitting), CGRectGetMinY(knitting) + 0.63499 * CGRectGetHeight(knitting))];
            [oval213Path addCurveToPoint: CGPointMake(CGRectGetMinX(knitting) + 0.84579 * CGRectGetWidth(knitting), CGRectGetMinY(knitting) + 0.20204 * CGRectGetHeight(knitting)) controlPoint1: CGPointMake(CGRectGetMinX(knitting) + 0.95833 * CGRectGetWidth(knitting), CGRectGetMinY(knitting) + 0.39055 * CGRectGetHeight(knitting)) controlPoint2: CGPointMake(CGRectGetMinX(knitting) + 0.91589 * CGRectGetWidth(knitting), CGRectGetMinY(knitting) + 0.28375 * CGRectGetHeight(knitting))];
            [oval213Path moveToPoint: CGPointMake(CGRectGetMinX(knitting) + 0.82466 * CGRectGetWidth(knitting), CGRectGetMinY(knitting) + 0.17902 * CGRectGetHeight(knitting))];
            [oval213Path addCurveToPoint: CGPointMake(CGRectGetMinX(knitting) + 0.50000 * CGRectGetWidth(knitting), CGRectGetMinY(knitting) + 0.04218 * CGRectGetHeight(knitting)) controlPoint1: CGPointMake(CGRectGetMinX(knitting) + 0.74167 * CGRectGetWidth(knitting), CGRectGetMinY(knitting) + 0.09449 * CGRectGetHeight(knitting)) controlPoint2: CGPointMake(CGRectGetMinX(knitting) + 0.62685 * CGRectGetWidth(knitting), CGRectGetMinY(knitting) + 0.04218 * CGRectGetHeight(knitting))];
            [oval213Path addCurveToPoint: CGPointMake(CGRectGetMinX(knitting) + 0.04167 * CGRectGetWidth(knitting), CGRectGetMinY(knitting) + 0.50741 * CGRectGetHeight(knitting)) controlPoint1: CGPointMake(CGRectGetMinX(knitting) + 0.24687 * CGRectGetWidth(knitting), CGRectGetMinY(knitting) + 0.04218 * CGRectGetHeight(knitting)) controlPoint2: CGPointMake(CGRectGetMinX(knitting) + 0.04167 * CGRectGetWidth(knitting), CGRectGetMinY(knitting) + 0.25047 * CGRectGetHeight(knitting))];
            [oval213Path addCurveToPoint: CGPointMake(CGRectGetMinX(knitting) + 0.50000 * CGRectGetWidth(knitting), CGRectGetMinY(knitting) + 0.97264 * CGRectGetHeight(knitting)) controlPoint1: CGPointMake(CGRectGetMinX(knitting) + 0.04167 * CGRectGetWidth(knitting), CGRectGetMinY(knitting) + 0.76435 * CGRectGetHeight(knitting)) controlPoint2: CGPointMake(CGRectGetMinX(knitting) + 0.24687 * CGRectGetWidth(knitting), CGRectGetMinY(knitting) + 0.97264 * CGRectGetHeight(knitting))];
            [oval213Path addCurveToPoint: CGPointMake(CGRectGetMinX(knitting) + 0.80292 * CGRectGetWidth(knitting), CGRectGetMinY(knitting) + 0.85655 * CGRectGetHeight(knitting)) controlPoint1: CGPointMake(CGRectGetMinX(knitting) + 0.61612 * CGRectGetWidth(knitting), CGRectGetMinY(knitting) + 0.97264 * CGRectGetHeight(knitting)) controlPoint2: CGPointMake(CGRectGetMinX(knitting) + 0.72216 * CGRectGetWidth(knitting), CGRectGetMinY(knitting) + 0.92881 * CGRectGetHeight(knitting))];
            oval213Path.miterLimit = 4;

            oval213Path.usesEvenOddFillRule = YES;

            [orangeColor setStroke];
            oval213Path.lineWidth = 2;
            [oval213Path stroke];


            //// Shape Drawing
            UIBezierPath* shapePath = [UIBezierPath bezierPath];
            [shapePath moveToPoint: CGPointMake(CGRectGetMinX(knitting) + 0.27364 * CGRectGetWidth(knitting), CGRectGetMinY(knitting) + 0.53498 * CGRectGetHeight(knitting))];
            [shapePath addCurveToPoint: CGPointMake(CGRectGetMinX(knitting) + 0.56841 * CGRectGetWidth(knitting), CGRectGetMinY(knitting) + 0.29130 * CGRectGetHeight(knitting)) controlPoint1: CGPointMake(CGRectGetMinX(knitting) + 0.33148 * CGRectGetWidth(knitting), CGRectGetMinY(knitting) + 0.41548 * CGRectGetHeight(knitting)) controlPoint2: CGPointMake(CGRectGetMinX(knitting) + 0.43877 * CGRectGetWidth(knitting), CGRectGetMinY(knitting) + 0.32509 * CGRectGetHeight(knitting))];
            shapePath.miterLimit = 4;

            shapePath.usesEvenOddFillRule = YES;

            [orangeColor setStroke];
            shapePath.lineWidth = 2;
            [shapePath stroke];


            //// Shape 2 Drawing
            UIBezierPath* shape2Path = [UIBezierPath bezierPath];
            [shape2Path moveToPoint: CGPointMake(CGRectGetMinX(knitting) + 0.33057 * CGRectGetWidth(knitting), CGRectGetMinY(knitting) + 0.72304 * CGRectGetHeight(knitting))];
            [shape2Path addCurveToPoint: CGPointMake(CGRectGetMinX(knitting) + 0.67468 * CGRectGetWidth(knitting), CGRectGetMinY(knitting) + 0.37986 * CGRectGetHeight(knitting)) controlPoint1: CGPointMake(CGRectGetMinX(knitting) + 0.37080 * CGRectGetWidth(knitting), CGRectGetMinY(knitting) + 0.55189 * CGRectGetHeight(knitting)) controlPoint2: CGPointMake(CGRectGetMinX(knitting) + 0.50495 * CGRectGetWidth(knitting), CGRectGetMinY(knitting) + 0.41774 * CGRectGetHeight(knitting))];
            shape2Path.miterLimit = 4;

            shape2Path.usesEvenOddFillRule = YES;

            [orangeColor setStroke];
            shape2Path.lineWidth = 2;
            [shape2Path stroke];


            //// Shape 3 Drawing
            UIBezierPath* shape3Path = [UIBezierPath bezierPath];
            [shape3Path moveToPoint: CGPointMake(CGRectGetMinX(knitting) + 0.41809 * CGRectGetWidth(knitting), CGRectGetMinY(knitting) + 0.83093 * CGRectGetHeight(knitting))];
            [shape3Path addCurveToPoint: CGPointMake(CGRectGetMinX(knitting) + 0.68007 * CGRectGetWidth(knitting), CGRectGetMinY(knitting) + 0.50056 * CGRectGetHeight(knitting)) controlPoint1: CGPointMake(CGRectGetMinX(knitting) + 0.44759 * CGRectGetWidth(knitting), CGRectGetMinY(knitting) + 0.68269 * CGRectGetHeight(knitting)) controlPoint2: CGPointMake(CGRectGetMinX(knitting) + 0.54709 * CGRectGetWidth(knitting), CGRectGetMinY(knitting) + 0.56019 * CGRectGetHeight(knitting))];
            shape3Path.miterLimit = 4;

            shape3Path.usesEvenOddFillRule = YES;

            [orangeColor setStroke];
            shape3Path.lineWidth = 2;
            [shape3Path stroke];


            //// Shape 4 Drawing
            UIBezierPath* shape4Path = [UIBezierPath bezierPath];
            [shape4Path moveToPoint: CGPointMake(CGRectGetMinX(knitting) + 0.66139 * CGRectGetWidth(knitting), CGRectGetMinY(knitting) + 0.32583 * CGRectGetHeight(knitting))];
            [shape4Path addCurveToPoint: CGPointMake(CGRectGetMinX(knitting) + 0.68182 * CGRectGetWidth(knitting), CGRectGetMinY(knitting) + 0.46139 * CGRectGetHeight(knitting)) controlPoint1: CGPointMake(CGRectGetMinX(knitting) + 0.67466 * CGRectGetWidth(knitting), CGRectGetMinY(knitting) + 0.36918 * CGRectGetHeight(knitting)) controlPoint2: CGPointMake(CGRectGetMinX(knitting) + 0.68182 * CGRectGetWidth(knitting), CGRectGetMinY(knitting) + 0.41361 * CGRectGetHeight(knitting))];
            [shape4Path addCurveToPoint: CGPointMake(CGRectGetMinX(knitting) + 0.63139 * CGRectGetWidth(knitting), CGRectGetMinY(knitting) + 0.67282 * CGRectGetHeight(knitting)) controlPoint1: CGPointMake(CGRectGetMinX(knitting) + 0.68182 * CGRectGetWidth(knitting), CGRectGetMinY(knitting) + 0.53759 * CGRectGetHeight(knitting)) controlPoint2: CGPointMake(CGRectGetMinX(knitting) + 0.66361 * CGRectGetWidth(knitting), CGRectGetMinY(knitting) + 0.60947 * CGRectGetHeight(knitting))];
            [shape4Path addCurveToPoint: CGPointMake(CGRectGetMinX(knitting) + 0.45495 * CGRectGetWidth(knitting), CGRectGetMinY(knitting) + 0.86081 * CGRectGetHeight(knitting)) controlPoint1: CGPointMake(CGRectGetMinX(knitting) + 0.59145 * CGRectGetWidth(knitting), CGRectGetMinY(knitting) + 0.75128 * CGRectGetHeight(knitting)) controlPoint2: CGPointMake(CGRectGetMinX(knitting) + 0.53000 * CGRectGetWidth(knitting), CGRectGetMinY(knitting) + 0.81663 * CGRectGetHeight(knitting))];
            shape4Path.miterLimit = 4;

            shape4Path.usesEvenOddFillRule = YES;

            [orangeColor setStroke];
            shape4Path.lineWidth = 2;
            [shape4Path stroke];


            //// Shape 5 Drawing
            UIBezierPath* shape5Path = [UIBezierPath bezierPath];
            [shape5Path moveToPoint: CGPointMake(CGRectGetMinX(knitting) + 0.81759 * CGRectGetWidth(knitting), CGRectGetMinY(knitting) + 0.46065 * CGRectGetHeight(knitting))];
            [shape5Path addCurveToPoint: CGPointMake(CGRectGetMinX(knitting) + 0.81818 * CGRectGetWidth(knitting), CGRectGetMinY(knitting) + 0.48446 * CGRectGetHeight(knitting)) controlPoint1: CGPointMake(CGRectGetMinX(knitting) + 0.81798 * CGRectGetWidth(knitting), CGRectGetMinY(knitting) + 0.46852 * CGRectGetHeight(knitting)) controlPoint2: CGPointMake(CGRectGetMinX(knitting) + 0.81818 * CGRectGetWidth(knitting), CGRectGetMinY(knitting) + 0.47647 * CGRectGetHeight(knitting))];
            [shape5Path addCurveToPoint: CGPointMake(CGRectGetMinX(knitting) + 0.76775 * CGRectGetWidth(knitting), CGRectGetMinY(knitting) + 0.69589 * CGRectGetHeight(knitting)) controlPoint1: CGPointMake(CGRectGetMinX(knitting) + 0.81818 * CGRectGetWidth(knitting), CGRectGetMinY(knitting) + 0.56065 * CGRectGetHeight(knitting)) controlPoint2: CGPointMake(CGRectGetMinX(knitting) + 0.79998 * CGRectGetWidth(knitting), CGRectGetMinY(knitting) + 0.63254 * CGRectGetHeight(knitting))];
            [shape5Path addCurveToPoint: CGPointMake(CGRectGetMinX(knitting) + 0.54020 * CGRectGetWidth(knitting), CGRectGetMinY(knitting) + 0.90974 * CGRectGetHeight(knitting)) controlPoint1: CGPointMake(CGRectGetMinX(knitting) + 0.71909 * CGRectGetWidth(knitting), CGRectGetMinY(knitting) + 0.79151 * CGRectGetHeight(knitting)) controlPoint2: CGPointMake(CGRectGetMinX(knitting) + 0.63845 * CGRectGetWidth(knitting), CGRectGetMinY(knitting) + 0.86766 * CGRectGetHeight(knitting))];
            shape5Path.miterLimit = 4;

            shape5Path.usesEvenOddFillRule = YES;

            [orangeColor setStroke];
            shape5Path.lineWidth = 2;
            [shape5Path stroke];


            //// Shape 6 Drawing
            UIBezierPath* shape6Path = [UIBezierPath bezierPath];
            [shape6Path moveToPoint: CGPointMake(CGRectGetMinX(knitting) + 0.32902 * CGRectGetWidth(knitting), CGRectGetMinY(knitting) + 0.29464 * CGRectGetHeight(knitting))];
            [shape6Path addCurveToPoint: CGPointMake(CGRectGetMinX(knitting) + 0.45455 * CGRectGetWidth(knitting), CGRectGetMinY(knitting) + 0.27683 * CGRectGetHeight(knitting)) controlPoint1: CGPointMake(CGRectGetMinX(knitting) + 0.36889 * CGRectGetWidth(knitting), CGRectGetMinY(knitting) + 0.28304 * CGRectGetHeight(knitting)) controlPoint2: CGPointMake(CGRectGetMinX(knitting) + 0.41100 * CGRectGetWidth(knitting), CGRectGetMinY(knitting) + 0.27683 * CGRectGetHeight(knitting))];
            [shape6Path addCurveToPoint: CGPointMake(CGRectGetMinX(knitting) + 0.90818 * CGRectGetWidth(knitting), CGRectGetMinY(knitting) + 0.70876 * CGRectGetHeight(knitting)) controlPoint1: CGPointMake(CGRectGetMinX(knitting) + 0.69584 * CGRectGetWidth(knitting), CGRectGetMinY(knitting) + 0.27683 * CGRectGetHeight(knitting)) controlPoint2: CGPointMake(CGRectGetMinX(knitting) + 0.89320 * CGRectGetWidth(knitting), CGRectGetMinY(knitting) + 0.46766 * CGRectGetHeight(knitting))];
            [shape6Path addLineToPoint: CGPointMake(CGRectGetMinX(knitting) + 0.90862 * CGRectGetWidth(knitting), CGRectGetMinY(knitting) + 0.71787 * CGRectGetHeight(knitting))];
            shape6Path.miterLimit = 4;

            shape6Path.usesEvenOddFillRule = YES;

            [orangeColor setStroke];
            shape6Path.lineWidth = 2;
            [shape6Path stroke];


            //// Shape 7 Drawing
            UIBezierPath* shape7Path = [UIBezierPath bezierPath];
            [shape7Path moveToPoint: CGPointMake(CGRectGetMinX(knitting) + 0.44511 * CGRectGetWidth(knitting), CGRectGetMinY(knitting) + 0.16262 * CGRectGetHeight(knitting))];
            [shape7Path addCurveToPoint: CGPointMake(CGRectGetMinX(knitting) + 0.47727 * CGRectGetWidth(knitting), CGRectGetMinY(knitting) + 0.16149 * CGRectGetHeight(knitting)) controlPoint1: CGPointMake(CGRectGetMinX(knitting) + 0.45573 * CGRectGetWidth(knitting), CGRectGetMinY(knitting) + 0.16185 * CGRectGetHeight(knitting)) controlPoint2: CGPointMake(CGRectGetMinX(knitting) + 0.46645 * CGRectGetWidth(knitting), CGRectGetMinY(knitting) + 0.16149 * CGRectGetHeight(knitting))];
            [shape7Path addCurveToPoint: CGPointMake(CGRectGetMinX(knitting) + 0.93479 * CGRectGetWidth(knitting), CGRectGetMinY(knitting) + 0.62248 * CGRectGetHeight(knitting)) controlPoint1: CGPointMake(CGRectGetMinX(knitting) + 0.72832 * CGRectGetWidth(knitting), CGRectGetMinY(knitting) + 0.16149 * CGRectGetHeight(knitting)) controlPoint2: CGPointMake(CGRectGetMinX(knitting) + 0.93479 * CGRectGetWidth(knitting), CGRectGetMinY(knitting) + 0.36766 * CGRectGetHeight(knitting))];
            [shape7Path addLineToPoint: CGPointMake(CGRectGetMinX(knitting) + 0.93479 * CGRectGetWidth(knitting), CGRectGetMinY(knitting) + 0.65578 * CGRectGetHeight(knitting))];
            shape7Path.miterLimit = 4;

            shape7Path.usesEvenOddFillRule = YES;

            [orangeColor setStroke];
            shape7Path.lineWidth = 2;
            [shape7Path stroke];


            //// Shape 8 Drawing
            UIBezierPath* shape8Path = [UIBezierPath bezierPath];
            [shape8Path moveToPoint: CGPointMake(CGRectGetMinX(knitting) + 0.56563 * CGRectGetWidth(knitting), CGRectGetMinY(knitting) + 0.04788 * CGRectGetHeight(knitting))];
            [shape8Path addCurveToPoint: CGPointMake(CGRectGetMinX(knitting) + 0.15909 * CGRectGetWidth(knitting), CGRectGetMinY(knitting) + 0.50753 * CGRectGetHeight(knitting)) controlPoint1: CGPointMake(CGRectGetMinX(knitting) + 0.33307 * CGRectGetWidth(knitting), CGRectGetMinY(knitting) + 0.07623 * CGRectGetHeight(knitting)) controlPoint2: CGPointMake(CGRectGetMinX(knitting) + 0.15909 * CGRectGetWidth(knitting), CGRectGetMinY(knitting) + 0.27224 * CGRectGetHeight(knitting))];
            [shape8Path addCurveToPoint: CGPointMake(CGRectGetMinX(knitting) + 0.56214 * CGRectGetWidth(knitting), CGRectGetMinY(knitting) + 0.96852 * CGRectGetHeight(knitting)) controlPoint1: CGPointMake(CGRectGetMinX(knitting) + 0.15909 * CGRectGetWidth(knitting), CGRectGetMinY(knitting) + 0.74281 * CGRectGetHeight(knitting)) controlPoint2: CGPointMake(CGRectGetMinX(knitting) + 0.32958 * CGRectGetWidth(knitting), CGRectGetMinY(knitting) + 0.94015 * CGRectGetHeight(knitting))];
            shape8Path.miterLimit = 4;

            shape8Path.usesEvenOddFillRule = YES;

            [orangeColor setStroke];
            shape8Path.lineWidth = 2;
            [shape8Path stroke];


            //// Shape 9 Drawing
            UIBezierPath* shape9Path = [UIBezierPath bezierPath];
            [shape9Path moveToPoint: CGPointMake(CGRectGetMinX(knitting) + 0.65666 * CGRectGetWidth(knitting), CGRectGetMinY(knitting) + 0.07085 * CGRectGetHeight(knitting))];
            [shape9Path addCurveToPoint: CGPointMake(CGRectGetMinX(knitting) + 0.27273 * CGRectGetWidth(knitting), CGRectGetMinY(knitting) + 0.50753 * CGRectGetHeight(knitting)) controlPoint1: CGPointMake(CGRectGetMinX(knitting) + 0.43399 * CGRectGetWidth(knitting), CGRectGetMinY(knitting) + 0.10643 * CGRectGetHeight(knitting)) controlPoint2: CGPointMake(CGRectGetMinX(knitting) + 0.27273 * CGRectGetWidth(knitting), CGRectGetMinY(knitting) + 0.28887 * CGRectGetHeight(knitting))];
            [shape9Path addCurveToPoint: CGPointMake(CGRectGetMinX(knitting) + 0.65666 * CGRectGetWidth(knitting), CGRectGetMinY(knitting) + 0.94380 * CGRectGetHeight(knitting)) controlPoint1: CGPointMake(CGRectGetMinX(knitting) + 0.27273 * CGRectGetWidth(knitting), CGRectGetMinY(knitting) + 0.72615 * CGRectGetHeight(knitting)) controlPoint2: CGPointMake(CGRectGetMinX(knitting) + 0.43399 * CGRectGetWidth(knitting), CGRectGetMinY(knitting) + 0.90823 * CGRectGetHeight(knitting))];
            shape9Path.miterLimit = 4;

            shape9Path.usesEvenOddFillRule = YES;

            [orangeColor setStroke];
            shape9Path.lineWidth = 2;
            [shape9Path stroke];


            //// Shape 10 Drawing
            UIBezierPath* shape10Path = [UIBezierPath bezierPath];
            [shape10Path moveToPoint: CGPointMake(CGRectGetMinX(knitting) + 0.75075 * CGRectGetWidth(knitting), CGRectGetMinY(knitting) + 0.25300 * CGRectGetHeight(knitting))];
            [shape10Path addLineToPoint: CGPointMake(CGRectGetMinX(knitting) + 0.90302 * CGRectGetWidth(knitting), CGRectGetMinY(knitting) + 0.09844 * CGRectGetHeight(knitting))];
            shape10Path.miterLimit = 4;

            shape10Path.usesEvenOddFillRule = YES;

            [orangeColor setStroke];
            shape10Path.lineWidth = 2;
            [shape10Path stroke];


            //// Oval 2 Drawing
            UIBezierPath* oval2Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(CGRectGetMinX(knitting) + floor(CGRectGetWidth(knitting) * 0.88636 + 0.14) + 0.36, CGRectGetMinY(knitting) + floor(CGRectGetHeight(knitting) * 0.00000 - 0.08) + 0.58, floor(CGRectGetWidth(knitting) * 1.00000 - 0.5) - floor(CGRectGetWidth(knitting) * 0.88636 + 0.14) + 0.64, floor(CGRectGetHeight(knitting) * 0.11535 + 0.28) - floor(CGRectGetHeight(knitting) * 0.00000 - 0.08) - 0.36)];
            [orangeColor setStroke];
            oval2Path.lineWidth = 2;
            [oval2Path stroke];


            //// Shape 11 Drawing
            UIBezierPath* shape11Path = [UIBezierPath bezierPath];
            [shape11Path moveToPoint: CGPointMake(CGRectGetMinX(knitting) + 0.17866 * CGRectGetWidth(knitting), CGRectGetMinY(knitting) + 0.18135 * CGRectGetHeight(knitting))];
            [shape11Path addLineToPoint: CGPointMake(CGRectGetMinX(knitting) + 0.09698 * CGRectGetWidth(knitting), CGRectGetMinY(knitting) + 0.09841 * CGRectGetHeight(knitting))];
            shape11Path.miterLimit = 4;

            shape11Path.usesEvenOddFillRule = YES;

            [orangeColor setStroke];
            shape11Path.lineWidth = 2;
            [shape11Path stroke];


            //// Oval 4 Drawing
            UIBezierPath* oval4Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(CGRectGetMinX(knitting) + floor(CGRectGetWidth(knitting) * 0.00000 + 0.5), CGRectGetMinY(knitting) + floor(CGRectGetHeight(knitting) * 0.00000 - 0.08) + 0.58, floor(CGRectGetWidth(knitting) * 0.11364 - 0.14) - floor(CGRectGetWidth(knitting) * 0.00000 + 0.5) + 0.64, floor(CGRectGetHeight(knitting) * 0.11535 + 0.28) - floor(CGRectGetHeight(knitting) * 0.00000 - 0.08) - 0.36)];
            [orangeColor setStroke];
            oval4Path.lineWidth = 2;
            [oval4Path stroke];


            //// Line Drawing
            UIBezierPath* linePath = [UIBezierPath bezierPath];
            [linePath moveToPoint: CGPointMake(CGRectGetMinX(knitting) + 0.17467 * CGRectGetWidth(knitting), CGRectGetMinY(knitting) + 0.83953 * CGRectGetHeight(knitting))];
            [linePath addLineToPoint: CGPointMake(CGRectGetMinX(knitting) + 0.01827 * CGRectGetWidth(knitting), CGRectGetMinY(knitting) + 1.00000 * CGRectGetHeight(knitting))];
            linePath.miterLimit = 4;

            linePath.lineCapStyle = kCGLineCapSquare;

            linePath.lineJoinStyle = kCGLineJoinRound;

            linePath.usesEvenOddFillRule = YES;

            [orangeColor setStroke];
            linePath.lineWidth = 2;
            [linePath stroke];


            //// Line 2 Drawing
            UIBezierPath* line2Path = [UIBezierPath bezierPath];
            [line2Path moveToPoint: CGPointMake(CGRectGetMinX(knitting) + 0.74067 * CGRectGetWidth(knitting), CGRectGetMinY(knitting) + 0.74767 * CGRectGetHeight(knitting))];
            [line2Path addLineToPoint: CGPointMake(CGRectGetMinX(knitting) + 0.98917 * CGRectGetWidth(knitting), CGRectGetMinY(knitting) + 0.99996 * CGRectGetHeight(knitting))];
            line2Path.miterLimit = 4;

            line2Path.lineCapStyle = kCGLineCapSquare;

            line2Path.usesEvenOddFillRule = YES;

            [orangeColor setStroke];
            line2Path.lineWidth = 2;
            [line2Path stroke];
        }
    }
}

+ (void)drawWatchIconWithRect: (CGRect)rect
{
    //// Color Declarations
    UIColor* orangeColor = [UIColor colorWithRed: 1 green: 0.408 blue: 0.086 alpha: 1];

    //// Variable Declarations
    CGFloat smallestSide = MIN(rect.size.height, rect.size.width);
    CGPoint position = CGPointMake(rect.origin.x + (rect.size.width - smallestSide) * 0.5, rect.origin.y + (rect.size.height - smallestSide) * 0.5);

    //// Frames
    CGRect frame = CGRectMake(position.x, position.y, smallestSide, smallestSide);

    //// Subframes
    CGRect watch = CGRectMake(CGRectGetMinX(frame) + floor(CGRectGetWidth(frame) * 0.04599 - 0.48) + 0.98, CGRectGetMinY(frame) + floor(CGRectGetHeight(frame) * 0.05985 + 0.1) + 0.4, floor(CGRectGetWidth(frame) * 0.96246 + 0.38) - floor(CGRectGetWidth(frame) * 0.04599 - 0.48) - 0.86, floor(CGRectGetHeight(frame) * 0.93539 + 0.28) - floor(CGRectGetHeight(frame) * 0.05985 + 0.1) - 0.18);


    //// Watch
    {
        //// Rectangle-168 Drawing
        UIBezierPath* rectangle168Path = [UIBezierPath bezierPath];
        [rectangle168Path moveToPoint: CGPointMake(CGRectGetMinX(watch) + 0.43245 * CGRectGetWidth(watch), CGRectGetMinY(watch) + 0.84255 * CGRectGetHeight(watch))];
        [rectangle168Path addLineToPoint: CGPointMake(CGRectGetMinX(watch) + 0.27088 * CGRectGetWidth(watch), CGRectGetMinY(watch) + 1.00000 * CGRectGetHeight(watch))];
        [rectangle168Path addLineToPoint: CGPointMake(CGRectGetMinX(watch) + 0.05746 * CGRectGetWidth(watch), CGRectGetMinY(watch) + 0.94742 * CGRectGetHeight(watch))];
        [rectangle168Path addLineToPoint: CGPointMake(CGRectGetMinX(watch) + 0.00000 * CGRectGetWidth(watch), CGRectGetMinY(watch) + 0.73047 * CGRectGetHeight(watch))];
        [rectangle168Path addLineToPoint: CGPointMake(CGRectGetMinX(watch) + 0.14368 * CGRectGetWidth(watch), CGRectGetMinY(watch) + 0.58670 * CGRectGetHeight(watch))];
        [rectangle168Path moveToPoint: CGPointMake(CGRectGetMinX(watch) + 0.52236 * CGRectGetWidth(watch), CGRectGetMinY(watch) + 0.20488 * CGRectGetHeight(watch))];
        [rectangle168Path addLineToPoint: CGPointMake(CGRectGetMinX(watch) + 0.72976 * CGRectGetWidth(watch), CGRectGetMinY(watch) + 0.00000 * CGRectGetHeight(watch))];
        [rectangle168Path addLineToPoint: CGPointMake(CGRectGetMinX(watch) + 1.00000 * CGRectGetWidth(watch), CGRectGetMinY(watch) + 0.27063 * CGRectGetHeight(watch))];
        [rectangle168Path addLineToPoint: CGPointMake(CGRectGetMinX(watch) + 0.78362 * CGRectGetWidth(watch), CGRectGetMinY(watch) + 0.49019 * CGRectGetHeight(watch))];
        rectangle168Path.miterLimit = 4;

        rectangle168Path.usesEvenOddFillRule = YES;

        [orangeColor setStroke];
        rectangle168Path.lineWidth = 2;
        [rectangle168Path stroke];


        //// Oval-211 Drawing
        UIBezierPath* oval211Path = [UIBezierPath bezierPath];
        [oval211Path moveToPoint: CGPointMake(CGRectGetMinX(watch) + 0.78508 * CGRectGetWidth(watch), CGRectGetMinY(watch) + 0.53529 * CGRectGetHeight(watch))];
        [oval211Path addCurveToPoint: CGPointMake(CGRectGetMinX(watch) + 0.44693 * CGRectGetWidth(watch), CGRectGetMinY(watch) + 0.84375 * CGRectGetHeight(watch)) controlPoint1: CGPointMake(CGRectGetMinX(watch) + 0.77779 * CGRectGetWidth(watch), CGRectGetMinY(watch) + 0.71368 * CGRectGetHeight(watch)) controlPoint2: CGPointMake(CGRectGetMinX(watch) + 0.62640 * CGRectGetWidth(watch), CGRectGetMinY(watch) + 0.85179 * CGRectGetHeight(watch))];
        [oval211Path addCurveToPoint: CGPointMake(CGRectGetMinX(watch) + 0.13519 * CGRectGetWidth(watch), CGRectGetMinY(watch) + 0.50618 * CGRectGetHeight(watch)) controlPoint1: CGPointMake(CGRectGetMinX(watch) + 0.26747 * CGRectGetWidth(watch), CGRectGetMinY(watch) + 0.83571 * CGRectGetHeight(watch)) controlPoint2: CGPointMake(CGRectGetMinX(watch) + 0.12790 * CGRectGetWidth(watch), CGRectGetMinY(watch) + 0.68458 * CGRectGetHeight(watch))];
        [oval211Path addCurveToPoint: CGPointMake(CGRectGetMinX(watch) + 0.47334 * CGRectGetWidth(watch), CGRectGetMinY(watch) + 0.19771 * CGRectGetHeight(watch)) controlPoint1: CGPointMake(CGRectGetMinX(watch) + 0.14248 * CGRectGetWidth(watch), CGRectGetMinY(watch) + 0.32778 * CGRectGetHeight(watch)) controlPoint2: CGPointMake(CGRectGetMinX(watch) + 0.29388 * CGRectGetWidth(watch), CGRectGetMinY(watch) + 0.18967 * CGRectGetHeight(watch))];
        [oval211Path addCurveToPoint: CGPointMake(CGRectGetMinX(watch) + 0.78508 * CGRectGetWidth(watch), CGRectGetMinY(watch) + 0.53529 * CGRectGetHeight(watch)) controlPoint1: CGPointMake(CGRectGetMinX(watch) + 0.65280 * CGRectGetWidth(watch), CGRectGetMinY(watch) + 0.20575 * CGRectGetHeight(watch)) controlPoint2: CGPointMake(CGRectGetMinX(watch) + 0.79238 * CGRectGetWidth(watch), CGRectGetMinY(watch) + 0.35689 * CGRectGetHeight(watch))];
        [oval211Path closePath];
        [orangeColor setStroke];
        oval211Path.lineWidth = 2;
        [oval211Path stroke];


        //// Line Drawing
        UIBezierPath* linePath = [UIBezierPath bezierPath];
        [linePath moveToPoint: CGPointMake(CGRectGetMinX(watch) + 0.46096 * CGRectGetWidth(watch), CGRectGetMinY(watch) + 0.31183 * CGRectGetHeight(watch))];
        [linePath addLineToPoint: CGPointMake(CGRectGetMinX(watch) + 0.46201 * CGRectGetWidth(watch), CGRectGetMinY(watch) + 0.52481 * CGRectGetHeight(watch))];
        [linePath addLineToPoint: CGPointMake(CGRectGetMinX(watch) + 0.57413 * CGRectGetWidth(watch), CGRectGetMinY(watch) + 0.63654 * CGRectGetHeight(watch))];
        linePath.miterLimit = 4;

        linePath.usesEvenOddFillRule = YES;

        [orangeColor setStroke];
        linePath.lineWidth = 2;
        [linePath stroke];
    }
}

+ (void)drawDressIconWithRect: (CGRect)rect
{
    //// Color Declarations
    UIColor* orangeColor = [UIColor colorWithRed: 1 green: 0.408 blue: 0.086 alpha: 1];

    //// Variable Declarations
    CGFloat smallestSide = MIN(rect.size.height, rect.size.width);
    CGPoint position = CGPointMake(rect.origin.x + (rect.size.width - smallestSide) * 0.5, rect.origin.y + (rect.size.height - smallestSide) * 0.5);

    //// Frames
    CGRect frame = CGRectMake(position.x, position.y, smallestSide, smallestSide);

    //// Subframes
    CGRect dress = CGRectMake(CGRectGetMinX(frame) + floor(CGRectGetWidth(frame) * 0.05385 + 0.5), CGRectGetMinY(frame) + floor(CGRectGetHeight(frame) * 0.00769 + 0.11) + 0.39, floor(CGRectGetWidth(frame) * 0.95181 - 0.23) - floor(CGRectGetWidth(frame) * 0.05385 + 0.5) + 0.73, floor(CGRectGetHeight(frame) * 0.98932 + 0.5) - floor(CGRectGetHeight(frame) * 0.00769 + 0.11) - 0.39);


    //// Dress
    {
        //// Shape Drawing
        UIBezierPath* shapePath = [UIBezierPath bezierPath];
        [shapePath moveToPoint: CGPointMake(CGRectGetMinX(dress) + 0.65909 * CGRectGetWidth(dress), CGRectGetMinY(dress) + 0.12890 * CGRectGetHeight(dress))];
        [shapePath addLineToPoint: CGPointMake(CGRectGetMinX(dress) + 0.65909 * CGRectGetWidth(dress), CGRectGetMinY(dress) + 0.00000 * CGRectGetHeight(dress))];
        shapePath.miterLimit = 4;

        shapePath.usesEvenOddFillRule = YES;

        [orangeColor setStroke];
        shapePath.lineWidth = 2;
        [shapePath stroke];


        //// Shape 2 Drawing
        UIBezierPath* shape2Path = [UIBezierPath bezierPath];
        [shape2Path moveToPoint: CGPointMake(CGRectGetMinX(dress) + 0.34091 * CGRectGetWidth(dress), CGRectGetMinY(dress) + 0.12890 * CGRectGetHeight(dress))];
        [shape2Path addLineToPoint: CGPointMake(CGRectGetMinX(dress) + 0.34091 * CGRectGetWidth(dress), CGRectGetMinY(dress) + 0.00000 * CGRectGetHeight(dress))];
        shape2Path.miterLimit = 4;

        shape2Path.usesEvenOddFillRule = YES;

        [orangeColor setStroke];
        shape2Path.lineWidth = 2;
        [shape2Path stroke];


        //// Shape 3 Drawing
        UIBezierPath* shape3Path = [UIBezierPath bezierPath];
        [shape3Path moveToPoint: CGPointMake(CGRectGetMinX(dress) + 0.77273 * CGRectGetWidth(dress), CGRectGetMinY(dress) + 0.92516 * CGRectGetHeight(dress))];
        [shape3Path addCurveToPoint: CGPointMake(CGRectGetMinX(dress) + 0.68182 * CGRectGetWidth(dress), CGRectGetMinY(dress) + 0.62370 * CGRectGetHeight(dress)) controlPoint1: CGPointMake(CGRectGetMinX(dress) + 0.77273 * CGRectGetWidth(dress), CGRectGetMinY(dress) + 0.77131 * CGRectGetHeight(dress)) controlPoint2: CGPointMake(CGRectGetMinX(dress) + 0.68182 * CGRectGetWidth(dress), CGRectGetMinY(dress) + 0.62370 * CGRectGetHeight(dress))];
        shape3Path.miterLimit = 4;

        shape3Path.usesEvenOddFillRule = YES;

        [orangeColor setStroke];
        shape3Path.lineWidth = 2;
        [shape3Path stroke];


        //// Shape 4 Drawing
        UIBezierPath* shape4Path = [UIBezierPath bezierPath];
        [shape4Path moveToPoint: CGPointMake(CGRectGetMinX(dress) + 0.50000 * CGRectGetWidth(dress), CGRectGetMinY(dress) + 0.17672 * CGRectGetHeight(dress))];
        [shape4Path addCurveToPoint: CGPointMake(CGRectGetMinX(dress) + 0.38182 * CGRectGetWidth(dress), CGRectGetMinY(dress) + 0.12474 * CGRectGetHeight(dress)) controlPoint1: CGPointMake(CGRectGetMinX(dress) + 0.50000 * CGRectGetWidth(dress), CGRectGetMinY(dress) + 0.17672 * CGRectGetHeight(dress)) controlPoint2: CGPointMake(CGRectGetMinX(dress) + 0.45455 * CGRectGetWidth(dress), CGRectGetMinY(dress) + 0.12474 * CGRectGetHeight(dress))];
        [shape4Path addCurveToPoint: CGPointMake(CGRectGetMinX(dress) + 0.27273 * CGRectGetWidth(dress), CGRectGetMinY(dress) + 0.16632 * CGRectGetHeight(dress)) controlPoint1: CGPointMake(CGRectGetMinX(dress) + 0.30909 * CGRectGetWidth(dress), CGRectGetMinY(dress) + 0.12474 * CGRectGetHeight(dress)) controlPoint2: CGPointMake(CGRectGetMinX(dress) + 0.27273 * CGRectGetWidth(dress), CGRectGetMinY(dress) + 0.16632 * CGRectGetHeight(dress))];
        [shape4Path addCurveToPoint: CGPointMake(CGRectGetMinX(dress) + 0.38636 * CGRectGetWidth(dress), CGRectGetMinY(dress) + 0.31601 * CGRectGetHeight(dress)) controlPoint1: CGPointMake(CGRectGetMinX(dress) + 0.27273 * CGRectGetWidth(dress), CGRectGetMinY(dress) + 0.24740 * CGRectGetHeight(dress)) controlPoint2: CGPointMake(CGRectGetMinX(dress) + 0.38636 * CGRectGetWidth(dress), CGRectGetMinY(dress) + 0.31601 * CGRectGetHeight(dress))];
        [shape4Path addCurveToPoint: CGPointMake(CGRectGetMinX(dress) + 0.00000 * CGRectGetWidth(dress), CGRectGetMinY(dress) + 0.86902 * CGRectGetHeight(dress)) controlPoint1: CGPointMake(CGRectGetMinX(dress) + 0.38636 * CGRectGetWidth(dress), CGRectGetMinY(dress) + 0.31601 * CGRectGetHeight(dress)) controlPoint2: CGPointMake(CGRectGetMinX(dress) + 0.00000 * CGRectGetWidth(dress), CGRectGetMinY(dress) + 0.56549 * CGRectGetHeight(dress))];
        [shape4Path addCurveToPoint: CGPointMake(CGRectGetMinX(dress) + 0.22727 * CGRectGetWidth(dress), CGRectGetMinY(dress) + 0.92723 * CGRectGetHeight(dress)) controlPoint1: CGPointMake(CGRectGetMinX(dress) + 0.00000 * CGRectGetWidth(dress), CGRectGetMinY(dress) + 0.86902 * CGRectGetHeight(dress)) controlPoint2: CGPointMake(CGRectGetMinX(dress) + 0.04545 * CGRectGetWidth(dress), CGRectGetMinY(dress) + 0.92723 * CGRectGetHeight(dress))];
        [shape4Path addCurveToPoint: CGPointMake(CGRectGetMinX(dress) + 0.50000 * CGRectGetWidth(dress), CGRectGetMinY(dress) + 1.00000 * CGRectGetHeight(dress)) controlPoint1: CGPointMake(CGRectGetMinX(dress) + 0.22727 * CGRectGetWidth(dress), CGRectGetMinY(dress) + 0.92723 * CGRectGetHeight(dress)) controlPoint2: CGPointMake(CGRectGetMinX(dress) + 0.31364 * CGRectGetWidth(dress), CGRectGetMinY(dress) + 1.00000 * CGRectGetHeight(dress))];
        [shape4Path addCurveToPoint: CGPointMake(CGRectGetMinX(dress) + 0.77273 * CGRectGetWidth(dress), CGRectGetMinY(dress) + 0.92723 * CGRectGetHeight(dress)) controlPoint1: CGPointMake(CGRectGetMinX(dress) + 0.68636 * CGRectGetWidth(dress), CGRectGetMinY(dress) + 1.00000 * CGRectGetHeight(dress)) controlPoint2: CGPointMake(CGRectGetMinX(dress) + 0.77273 * CGRectGetWidth(dress), CGRectGetMinY(dress) + 0.92723 * CGRectGetHeight(dress))];
        [shape4Path addCurveToPoint: CGPointMake(CGRectGetMinX(dress) + 1.00000 * CGRectGetWidth(dress), CGRectGetMinY(dress) + 0.86902 * CGRectGetHeight(dress)) controlPoint1: CGPointMake(CGRectGetMinX(dress) + 0.95455 * CGRectGetWidth(dress), CGRectGetMinY(dress) + 0.92723 * CGRectGetHeight(dress)) controlPoint2: CGPointMake(CGRectGetMinX(dress) + 1.00000 * CGRectGetWidth(dress), CGRectGetMinY(dress) + 0.86902 * CGRectGetHeight(dress))];
        [shape4Path addCurveToPoint: CGPointMake(CGRectGetMinX(dress) + 0.61364 * CGRectGetWidth(dress), CGRectGetMinY(dress) + 0.31809 * CGRectGetHeight(dress)) controlPoint1: CGPointMake(CGRectGetMinX(dress) + 1.00000 * CGRectGetWidth(dress), CGRectGetMinY(dress) + 0.56549 * CGRectGetHeight(dress)) controlPoint2: CGPointMake(CGRectGetMinX(dress) + 0.61364 * CGRectGetWidth(dress), CGRectGetMinY(dress) + 0.31809 * CGRectGetHeight(dress))];
        [shape4Path addCurveToPoint: CGPointMake(CGRectGetMinX(dress) + 0.72727 * CGRectGetWidth(dress), CGRectGetMinY(dress) + 0.16840 * CGRectGetHeight(dress)) controlPoint1: CGPointMake(CGRectGetMinX(dress) + 0.61364 * CGRectGetWidth(dress), CGRectGetMinY(dress) + 0.31809 * CGRectGetHeight(dress)) controlPoint2: CGPointMake(CGRectGetMinX(dress) + 0.72727 * CGRectGetWidth(dress), CGRectGetMinY(dress) + 0.24948 * CGRectGetHeight(dress))];
        [shape4Path addCurveToPoint: CGPointMake(CGRectGetMinX(dress) + 0.61818 * CGRectGetWidth(dress), CGRectGetMinY(dress) + 0.12682 * CGRectGetHeight(dress)) controlPoint1: CGPointMake(CGRectGetMinX(dress) + 0.72727 * CGRectGetWidth(dress), CGRectGetMinY(dress) + 0.16840 * CGRectGetHeight(dress)) controlPoint2: CGPointMake(CGRectGetMinX(dress) + 0.69318 * CGRectGetWidth(dress), CGRectGetMinY(dress) + 0.12682 * CGRectGetHeight(dress))];
        [shape4Path addCurveToPoint: CGPointMake(CGRectGetMinX(dress) + 0.50000 * CGRectGetWidth(dress), CGRectGetMinY(dress) + 0.17672 * CGRectGetHeight(dress)) controlPoint1: CGPointMake(CGRectGetMinX(dress) + 0.54318 * CGRectGetWidth(dress), CGRectGetMinY(dress) + 0.12682 * CGRectGetHeight(dress)) controlPoint2: CGPointMake(CGRectGetMinX(dress) + 0.50000 * CGRectGetWidth(dress), CGRectGetMinY(dress) + 0.17672 * CGRectGetHeight(dress))];
        [shape4Path addLineToPoint: CGPointMake(CGRectGetMinX(dress) + 0.50000 * CGRectGetWidth(dress), CGRectGetMinY(dress) + 0.17672 * CGRectGetHeight(dress))];
        [shape4Path closePath];
        shape4Path.miterLimit = 4;

        shape4Path.usesEvenOddFillRule = YES;

        [orangeColor setStroke];
        shape4Path.lineWidth = 2;
        [shape4Path stroke];


        //// Shape 5 Drawing
        UIBezierPath* shape5Path = [UIBezierPath bezierPath];
        [shape5Path moveToPoint: CGPointMake(CGRectGetMinX(dress) + 0.22727 * CGRectGetWidth(dress), CGRectGetMinY(dress) + 0.92828 * CGRectGetHeight(dress))];
        [shape5Path addCurveToPoint: CGPointMake(CGRectGetMinX(dress) + 0.31818 * CGRectGetWidth(dress), CGRectGetMinY(dress) + 0.63154 * CGRectGetHeight(dress)) controlPoint1: CGPointMake(CGRectGetMinX(dress) + 0.22727 * CGRectGetWidth(dress), CGRectGetMinY(dress) + 0.77443 * CGRectGetHeight(dress)) controlPoint2: CGPointMake(CGRectGetMinX(dress) + 0.31818 * CGRectGetWidth(dress), CGRectGetMinY(dress) + 0.63154 * CGRectGetHeight(dress))];
        shape5Path.miterLimit = 4;

        shape5Path.usesEvenOddFillRule = YES;

        [orangeColor setStroke];
        shape5Path.lineWidth = 2;
        [shape5Path stroke];
    }
}

+ (void)drawBuffetIconWithRect: (CGRect)rect
{
    //// Color Declarations
    UIColor* orangeColor = [UIColor colorWithRed: 1 green: 0.408 blue: 0.086 alpha: 1];

    //// Variable Declarations
    CGFloat smallestSide = MIN(rect.size.height, rect.size.width);
    CGPoint position = CGPointMake(rect.origin.x + (rect.size.width - smallestSide) * 0.5, rect.origin.y + (rect.size.height - smallestSide) * 0.5);

    //// Frames
    CGRect frame = CGRectMake(position.x, position.y, smallestSide, smallestSide);

    //// Subframes
    CGRect buffet = CGRectMake(CGRectGetMinX(frame) + floor(CGRectGetWidth(frame) * 0.00769 + 0.5), CGRectGetMinY(frame) + floor(CGRectGetHeight(frame) * 0.20769 + 0.32) + 0.18, floor(CGRectGetWidth(frame) * 0.99231 + 0.5) - floor(CGRectGetWidth(frame) * 0.00769 + 0.5), floor(CGRectGetHeight(frame) * 0.79089 + 0.5) - floor(CGRectGetHeight(frame) * 0.20769 + 0.32) - 0.18);


    //// Buffet
    {
        //// Rectangle-path Drawing
        UIBezierPath* rectanglepathPath = [UIBezierPath bezierPathWithRect: CGRectMake(CGRectGetMinX(buffet) + floor(CGRectGetWidth(buffet) * 0.00000 + 0.5), CGRectGetMinY(buffet) + floor(CGRectGetHeight(buffet) * 0.00000 - 0.02) + 0.52, floor(CGRectGetWidth(buffet) * 1.00000 + 0.5) - floor(CGRectGetWidth(buffet) * 0.00000 + 0.5), floor(CGRectGetHeight(buffet) * 0.76897 - 0.32) - floor(CGRectGetHeight(buffet) * 0.00000 - 0.02) + 0.3)];
        [orangeColor setStroke];
        rectanglepathPath.lineWidth = 2;
        [rectanglepathPath stroke];


        //// Shape Drawing
        UIBezierPath* shapePath = [UIBezierPath bezierPath];
        [shapePath moveToPoint: CGPointMake(CGRectGetMinX(buffet) + 0.31818 * CGRectGetWidth(buffet), CGRectGetMinY(buffet) + 0.23078 * CGRectGetHeight(buffet))];
        [shapePath addLineToPoint: CGPointMake(CGRectGetMinX(buffet) + 0.68182 * CGRectGetWidth(buffet), CGRectGetMinY(buffet) + 0.23078 * CGRectGetHeight(buffet))];
        shapePath.miterLimit = 4;

        shapePath.usesEvenOddFillRule = YES;

        [orangeColor setStroke];
        shapePath.lineWidth = 2;
        [shapePath stroke];


        //// Shape 2 Drawing
        UIBezierPath* shape2Path = [UIBezierPath bezierPath];
        [shape2Path moveToPoint: CGPointMake(CGRectGetMinX(buffet) + 0.31818 * CGRectGetWidth(buffet), CGRectGetMinY(buffet) + 0.50001 * CGRectGetHeight(buffet))];
        [shape2Path addLineToPoint: CGPointMake(CGRectGetMinX(buffet) + 0.68182 * CGRectGetWidth(buffet), CGRectGetMinY(buffet) + 0.50001 * CGRectGetHeight(buffet))];
        shape2Path.miterLimit = 4;

        shape2Path.usesEvenOddFillRule = YES;

        [orangeColor setStroke];
        shape2Path.lineWidth = 2;
        [shape2Path stroke];


        //// Shape 3 Drawing
        UIBezierPath* shape3Path = [UIBezierPath bezierPath];
        [shape3Path moveToPoint: CGPointMake(CGRectGetMinX(buffet) + 0.68182 * CGRectGetWidth(buffet), CGRectGetMinY(buffet) + 0.76923 * CGRectGetHeight(buffet))];
        [shape3Path addLineToPoint: CGPointMake(CGRectGetMinX(buffet) + 0.68182 * CGRectGetWidth(buffet), CGRectGetMinY(buffet) + 0.00000 * CGRectGetHeight(buffet))];
        shape3Path.miterLimit = 4;

        shape3Path.usesEvenOddFillRule = YES;

        [orangeColor setStroke];
        shape3Path.lineWidth = 2;
        [shape3Path stroke];


        //// Shape 4 Drawing
        UIBezierPath* shape4Path = [UIBezierPath bezierPath];
        [shape4Path moveToPoint: CGPointMake(CGRectGetMinX(buffet) + 0.31818 * CGRectGetWidth(buffet), CGRectGetMinY(buffet) + 0.76923 * CGRectGetHeight(buffet))];
        [shape4Path addLineToPoint: CGPointMake(CGRectGetMinX(buffet) + 0.31818 * CGRectGetWidth(buffet), CGRectGetMinY(buffet) + 0.00000 * CGRectGetHeight(buffet))];
        shape4Path.miterLimit = 4;

        shape4Path.usesEvenOddFillRule = YES;

        [orangeColor setStroke];
        shape4Path.lineWidth = 2;
        [shape4Path stroke];


        //// Oval 2 Drawing
        UIBezierPath* oval2Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(CGRectGetMinX(buffet) + floor(CGRectGetWidth(buffet) * 0.75391) + 0.5, CGRectGetMinY(buffet) + floor(CGRectGetHeight(buffet) * 0.35270 + 0.25) + 0.25, floor(CGRectGetWidth(buffet) * 0.79164 + 0.17) - floor(CGRectGetWidth(buffet) * 0.75391) - 0.17, floor(CGRectGetHeight(buffet) * 0.41641 + 0.42) - floor(CGRectGetHeight(buffet) * 0.35270 + 0.25) - 0.17)];
        [orangeColor setStroke];
        oval2Path.lineWidth = 2;
        [oval2Path stroke];


        //// Oval 4 Drawing
        UIBezierPath* oval4Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(CGRectGetMinX(buffet) + floor(CGRectGetWidth(buffet) * 0.20844 - 0.18) + 0.68, CGRectGetMinY(buffet) + floor(CGRectGetHeight(buffet) * 0.35270 + 0.25) + 0.25, floor(CGRectGetWidth(buffet) * 0.24617 - 0.01) - floor(CGRectGetWidth(buffet) * 0.20844 - 0.18) - 0.17, floor(CGRectGetHeight(buffet) * 0.41641 + 0.42) - floor(CGRectGetHeight(buffet) * 0.35270 + 0.25) - 0.17)];
        [orangeColor setStroke];
        oval4Path.lineWidth = 2;
        [oval4Path stroke];


        //// Shape 5 Drawing
        UIBezierPath* shape5Path = [UIBezierPath bezierPath];
        [shape5Path moveToPoint: CGPointMake(CGRectGetMinX(buffet) + 0.90909 * CGRectGetWidth(buffet), CGRectGetMinY(buffet) + 0.76923 * CGRectGetHeight(buffet))];
        [shape5Path addLineToPoint: CGPointMake(CGRectGetMinX(buffet) + 0.93182 * CGRectGetWidth(buffet), CGRectGetMinY(buffet) + 1.00000 * CGRectGetHeight(buffet))];
        [shape5Path addLineToPoint: CGPointMake(CGRectGetMinX(buffet) + 0.88636 * CGRectGetWidth(buffet), CGRectGetMinY(buffet) + 1.00000 * CGRectGetHeight(buffet))];
        [shape5Path addLineToPoint: CGPointMake(CGRectGetMinX(buffet) + 0.81818 * CGRectGetWidth(buffet), CGRectGetMinY(buffet) + 0.76923 * CGRectGetHeight(buffet))];
        shape5Path.miterLimit = 4;

        shape5Path.usesEvenOddFillRule = YES;

        [orangeColor setStroke];
        shape5Path.lineWidth = 2;
        [shape5Path stroke];


        //// Shape 6 Drawing
        UIBezierPath* shape6Path = [UIBezierPath bezierPath];
        [shape6Path moveToPoint: CGPointMake(CGRectGetMinX(buffet) + 0.09091 * CGRectGetWidth(buffet), CGRectGetMinY(buffet) + 0.76923 * CGRectGetHeight(buffet))];
        [shape6Path addLineToPoint: CGPointMake(CGRectGetMinX(buffet) + 0.06818 * CGRectGetWidth(buffet), CGRectGetMinY(buffet) + 1.00000 * CGRectGetHeight(buffet))];
        [shape6Path addLineToPoint: CGPointMake(CGRectGetMinX(buffet) + 0.11364 * CGRectGetWidth(buffet), CGRectGetMinY(buffet) + 1.00000 * CGRectGetHeight(buffet))];
        [shape6Path addLineToPoint: CGPointMake(CGRectGetMinX(buffet) + 0.18182 * CGRectGetWidth(buffet), CGRectGetMinY(buffet) + 0.76923 * CGRectGetHeight(buffet))];
        shape6Path.miterLimit = 4;

        shape6Path.usesEvenOddFillRule = YES;

        [orangeColor setStroke];
        shape6Path.lineWidth = 2;
        [shape6Path stroke];
    }
}

+ (void)drawBowtieIconWithRect: (CGRect)rect
{
    //// Color Declarations
    UIColor* orangeColor = [UIColor colorWithRed: 1 green: 0.408 blue: 0.086 alpha: 1];

    //// Variable Declarations
    CGFloat smallestSide = MIN(rect.size.height, rect.size.width);
    CGPoint position = CGPointMake(rect.origin.x + (rect.size.width - smallestSide) * 0.5, rect.origin.y + (rect.size.height - smallestSide) * 0.5);

    //// Frames
    CGRect frame = CGRectMake(position.x, position.y, smallestSide, smallestSide);

    //// Subframes
    CGRect bowtie = CGRectMake(CGRectGetMinX(frame) + floor(CGRectGetWidth(frame) * 0.00769 + 0.5), CGRectGetMinY(frame) + floor(CGRectGetHeight(frame) * 0.21538 + 0.17) + 0.33, floor(CGRectGetWidth(frame) * 0.99231 + 0.5) - floor(CGRectGetWidth(frame) * 0.00769 + 0.5), floor(CGRectGetHeight(frame) * 0.78974 - 0.5) - floor(CGRectGetHeight(frame) * 0.21538 + 0.17) + 0.67);


    //// Bowtie
    {
        //// Shape Drawing
        UIBezierPath* shapePath = [UIBezierPath bezierPath];
        [shapePath moveToPoint: CGPointMake(CGRectGetMinX(bowtie) + 0.59375 * CGRectGetWidth(bowtie), CGRectGetMinY(bowtie) + 0.28571 * CGRectGetHeight(bowtie))];
        [shapePath addLineToPoint: CGPointMake(CGRectGetMinX(bowtie) + 0.40625 * CGRectGetWidth(bowtie), CGRectGetMinY(bowtie) + 0.28571 * CGRectGetHeight(bowtie))];
        [shapePath addCurveToPoint: CGPointMake(CGRectGetMinX(bowtie) + 0.37500 * CGRectGetWidth(bowtie), CGRectGetMinY(bowtie) + 0.50000 * CGRectGetHeight(bowtie)) controlPoint1: CGPointMake(CGRectGetMinX(bowtie) + 0.39763 * CGRectGetWidth(bowtie), CGRectGetMinY(bowtie) + 0.28571 * CGRectGetHeight(bowtie)) controlPoint2: CGPointMake(CGRectGetMinX(bowtie) + 0.37500 * CGRectGetWidth(bowtie), CGRectGetMinY(bowtie) + 0.38164 * CGRectGetHeight(bowtie))];
        [shapePath addCurveToPoint: CGPointMake(CGRectGetMinX(bowtie) + 0.40625 * CGRectGetWidth(bowtie), CGRectGetMinY(bowtie) + 0.71429 * CGRectGetHeight(bowtie)) controlPoint1: CGPointMake(CGRectGetMinX(bowtie) + 0.37500 * CGRectGetWidth(bowtie), CGRectGetMinY(bowtie) + 0.61836 * CGRectGetHeight(bowtie)) controlPoint2: CGPointMake(CGRectGetMinX(bowtie) + 0.39763 * CGRectGetWidth(bowtie), CGRectGetMinY(bowtie) + 0.71429 * CGRectGetHeight(bowtie))];
        [shapePath addLineToPoint: CGPointMake(CGRectGetMinX(bowtie) + 0.59375 * CGRectGetWidth(bowtie), CGRectGetMinY(bowtie) + 0.71429 * CGRectGetHeight(bowtie))];
        [shapePath addCurveToPoint: CGPointMake(CGRectGetMinX(bowtie) + 0.62500 * CGRectGetWidth(bowtie), CGRectGetMinY(bowtie) + 0.50000 * CGRectGetHeight(bowtie)) controlPoint1: CGPointMake(CGRectGetMinX(bowtie) + 0.60237 * CGRectGetWidth(bowtie), CGRectGetMinY(bowtie) + 0.71429 * CGRectGetHeight(bowtie)) controlPoint2: CGPointMake(CGRectGetMinX(bowtie) + 0.62500 * CGRectGetWidth(bowtie), CGRectGetMinY(bowtie) + 0.61836 * CGRectGetHeight(bowtie))];
        [shapePath addCurveToPoint: CGPointMake(CGRectGetMinX(bowtie) + 0.59375 * CGRectGetWidth(bowtie), CGRectGetMinY(bowtie) + 0.28571 * CGRectGetHeight(bowtie)) controlPoint1: CGPointMake(CGRectGetMinX(bowtie) + 0.62500 * CGRectGetWidth(bowtie), CGRectGetMinY(bowtie) + 0.38164 * CGRectGetHeight(bowtie)) controlPoint2: CGPointMake(CGRectGetMinX(bowtie) + 0.60237 * CGRectGetWidth(bowtie), CGRectGetMinY(bowtie) + 0.28571 * CGRectGetHeight(bowtie))];
        [shapePath addLineToPoint: CGPointMake(CGRectGetMinX(bowtie) + 0.59375 * CGRectGetWidth(bowtie), CGRectGetMinY(bowtie) + 0.28571 * CGRectGetHeight(bowtie))];
        [shapePath closePath];
        shapePath.miterLimit = 4;

        shapePath.lineCapStyle = kCGLineCapSquare;

        shapePath.usesEvenOddFillRule = YES;

        [orangeColor setStroke];
        shapePath.lineWidth = 2;
        [shapePath stroke];


        //// Shape 2 Drawing
        UIBezierPath* shape2Path = [UIBezierPath bezierPath];
        [shape2Path moveToPoint: CGPointMake(CGRectGetMinX(bowtie) + 0.60102 * CGRectGetWidth(bowtie), CGRectGetMinY(bowtie) + 0.71429 * CGRectGetHeight(bowtie))];
        [shape2Path addCurveToPoint: CGPointMake(CGRectGetMinX(bowtie) + 0.95833 * CGRectGetWidth(bowtie), CGRectGetMinY(bowtie) + 1.00000 * CGRectGetHeight(bowtie)) controlPoint1: CGPointMake(CGRectGetMinX(bowtie) + 0.73381 * CGRectGetWidth(bowtie), CGRectGetMinY(bowtie) + 0.94193 * CGRectGetHeight(bowtie)) controlPoint2: CGPointMake(CGRectGetMinX(bowtie) + 0.95833 * CGRectGetWidth(bowtie), CGRectGetMinY(bowtie) + 1.00000 * CGRectGetHeight(bowtie))];
        [shape2Path addCurveToPoint: CGPointMake(CGRectGetMinX(bowtie) + 1.00000 * CGRectGetWidth(bowtie), CGRectGetMinY(bowtie) + 0.50000 * CGRectGetHeight(bowtie)) controlPoint1: CGPointMake(CGRectGetMinX(bowtie) + 0.96983 * CGRectGetWidth(bowtie), CGRectGetMinY(bowtie) + 1.00000 * CGRectGetHeight(bowtie)) controlPoint2: CGPointMake(CGRectGetMinX(bowtie) + 1.00000 * CGRectGetWidth(bowtie), CGRectGetMinY(bowtie) + 0.65779 * CGRectGetHeight(bowtie))];
        [shape2Path addCurveToPoint: CGPointMake(CGRectGetMinX(bowtie) + 0.95833 * CGRectGetWidth(bowtie), CGRectGetMinY(bowtie) + 0.00000 * CGRectGetHeight(bowtie)) controlPoint1: CGPointMake(CGRectGetMinX(bowtie) + 1.00000 * CGRectGetWidth(bowtie), CGRectGetMinY(bowtie) + 0.34221 * CGRectGetHeight(bowtie)) controlPoint2: CGPointMake(CGRectGetMinX(bowtie) + 0.96983 * CGRectGetWidth(bowtie), CGRectGetMinY(bowtie) + 0.00000 * CGRectGetHeight(bowtie))];
        [shape2Path addCurveToPoint: CGPointMake(CGRectGetMinX(bowtie) + 0.60102 * CGRectGetWidth(bowtie), CGRectGetMinY(bowtie) + 0.28571 * CGRectGetHeight(bowtie)) controlPoint1: CGPointMake(CGRectGetMinX(bowtie) + 0.95833 * CGRectGetWidth(bowtie), CGRectGetMinY(bowtie) + 0.00000 * CGRectGetHeight(bowtie)) controlPoint2: CGPointMake(CGRectGetMinX(bowtie) + 0.71027 * CGRectGetWidth(bowtie), CGRectGetMinY(bowtie) + 0.09843 * CGRectGetHeight(bowtie))];
        shape2Path.miterLimit = 4;

        shape2Path.lineCapStyle = kCGLineCapSquare;

        shape2Path.usesEvenOddFillRule = YES;

        [orangeColor setStroke];
        shape2Path.lineWidth = 2;
        [shape2Path stroke];


        //// Shape 3 Drawing
        UIBezierPath* shape3Path = [UIBezierPath bezierPath];
        [shape3Path moveToPoint: CGPointMake(CGRectGetMinX(bowtie) + 0.62500 * CGRectGetWidth(bowtie), CGRectGetMinY(bowtie) + 0.43368 * CGRectGetHeight(bowtie))];
        [shape3Path addCurveToPoint: CGPointMake(CGRectGetMinX(bowtie) + 0.81250 * CGRectGetWidth(bowtie), CGRectGetMinY(bowtie) + 0.35714 * CGRectGetHeight(bowtie)) controlPoint1: CGPointMake(CGRectGetMinX(bowtie) + 0.62500 * CGRectGetWidth(bowtie), CGRectGetMinY(bowtie) + 0.43368 * CGRectGetHeight(bowtie)) controlPoint2: CGPointMake(CGRectGetMinX(bowtie) + 0.73362 * CGRectGetWidth(bowtie), CGRectGetMinY(bowtie) + 0.35714 * CGRectGetHeight(bowtie))];
        shape3Path.miterLimit = 4;

        shape3Path.lineCapStyle = kCGLineCapSquare;

        shape3Path.usesEvenOddFillRule = YES;

        [orangeColor setStroke];
        shape3Path.lineWidth = 2;
        [shape3Path stroke];


        //// Shape 4 Drawing
        UIBezierPath* shape4Path = [UIBezierPath bezierPath];
        [shape4Path moveToPoint: CGPointMake(CGRectGetMinX(bowtie) + 0.62500 * CGRectGetWidth(bowtie), CGRectGetMinY(bowtie) + 0.56632 * CGRectGetHeight(bowtie))];
        [shape4Path addCurveToPoint: CGPointMake(CGRectGetMinX(bowtie) + 0.81250 * CGRectGetWidth(bowtie), CGRectGetMinY(bowtie) + 0.64286 * CGRectGetHeight(bowtie)) controlPoint1: CGPointMake(CGRectGetMinX(bowtie) + 0.62500 * CGRectGetWidth(bowtie), CGRectGetMinY(bowtie) + 0.56632 * CGRectGetHeight(bowtie)) controlPoint2: CGPointMake(CGRectGetMinX(bowtie) + 0.73362 * CGRectGetWidth(bowtie), CGRectGetMinY(bowtie) + 0.64286 * CGRectGetHeight(bowtie))];
        shape4Path.miterLimit = 4;

        shape4Path.lineCapStyle = kCGLineCapSquare;

        shape4Path.usesEvenOddFillRule = YES;

        [orangeColor setStroke];
        shape4Path.lineWidth = 2;
        [shape4Path stroke];


        //// Shape 5 Drawing
        UIBezierPath* shape5Path = [UIBezierPath bezierPath];
        [shape5Path moveToPoint: CGPointMake(CGRectGetMinX(bowtie) + 0.39898 * CGRectGetWidth(bowtie), CGRectGetMinY(bowtie) + 0.71429 * CGRectGetHeight(bowtie))];
        [shape5Path addCurveToPoint: CGPointMake(CGRectGetMinX(bowtie) + 0.04167 * CGRectGetWidth(bowtie), CGRectGetMinY(bowtie) + 1.00000 * CGRectGetHeight(bowtie)) controlPoint1: CGPointMake(CGRectGetMinX(bowtie) + 0.26619 * CGRectGetWidth(bowtie), CGRectGetMinY(bowtie) + 0.94193 * CGRectGetHeight(bowtie)) controlPoint2: CGPointMake(CGRectGetMinX(bowtie) + 0.04167 * CGRectGetWidth(bowtie), CGRectGetMinY(bowtie) + 1.00000 * CGRectGetHeight(bowtie))];
        [shape5Path addCurveToPoint: CGPointMake(CGRectGetMinX(bowtie) + 0.00000 * CGRectGetWidth(bowtie), CGRectGetMinY(bowtie) + 0.50000 * CGRectGetHeight(bowtie)) controlPoint1: CGPointMake(CGRectGetMinX(bowtie) + 0.03017 * CGRectGetWidth(bowtie), CGRectGetMinY(bowtie) + 1.00000 * CGRectGetHeight(bowtie)) controlPoint2: CGPointMake(CGRectGetMinX(bowtie) + 0.00000 * CGRectGetWidth(bowtie), CGRectGetMinY(bowtie) + 0.65779 * CGRectGetHeight(bowtie))];
        [shape5Path addCurveToPoint: CGPointMake(CGRectGetMinX(bowtie) + 0.04167 * CGRectGetWidth(bowtie), CGRectGetMinY(bowtie) + 0.00000 * CGRectGetHeight(bowtie)) controlPoint1: CGPointMake(CGRectGetMinX(bowtie) + 0.00000 * CGRectGetWidth(bowtie), CGRectGetMinY(bowtie) + 0.34221 * CGRectGetHeight(bowtie)) controlPoint2: CGPointMake(CGRectGetMinX(bowtie) + 0.03017 * CGRectGetWidth(bowtie), CGRectGetMinY(bowtie) + 0.00000 * CGRectGetHeight(bowtie))];
        [shape5Path addCurveToPoint: CGPointMake(CGRectGetMinX(bowtie) + 0.39898 * CGRectGetWidth(bowtie), CGRectGetMinY(bowtie) + 0.28571 * CGRectGetHeight(bowtie)) controlPoint1: CGPointMake(CGRectGetMinX(bowtie) + 0.04167 * CGRectGetWidth(bowtie), CGRectGetMinY(bowtie) + 0.00000 * CGRectGetHeight(bowtie)) controlPoint2: CGPointMake(CGRectGetMinX(bowtie) + 0.28973 * CGRectGetWidth(bowtie), CGRectGetMinY(bowtie) + 0.09843 * CGRectGetHeight(bowtie))];
        shape5Path.miterLimit = 4;

        shape5Path.lineCapStyle = kCGLineCapSquare;

        shape5Path.usesEvenOddFillRule = YES;

        [orangeColor setStroke];
        shape5Path.lineWidth = 2;
        [shape5Path stroke];


        //// Shape 6 Drawing
        UIBezierPath* shape6Path = [UIBezierPath bezierPath];
        [shape6Path moveToPoint: CGPointMake(CGRectGetMinX(bowtie) + 0.37500 * CGRectGetWidth(bowtie), CGRectGetMinY(bowtie) + 0.43368 * CGRectGetHeight(bowtie))];
        [shape6Path addCurveToPoint: CGPointMake(CGRectGetMinX(bowtie) + 0.18750 * CGRectGetWidth(bowtie), CGRectGetMinY(bowtie) + 0.35714 * CGRectGetHeight(bowtie)) controlPoint1: CGPointMake(CGRectGetMinX(bowtie) + 0.37500 * CGRectGetWidth(bowtie), CGRectGetMinY(bowtie) + 0.43368 * CGRectGetHeight(bowtie)) controlPoint2: CGPointMake(CGRectGetMinX(bowtie) + 0.26637 * CGRectGetWidth(bowtie), CGRectGetMinY(bowtie) + 0.35714 * CGRectGetHeight(bowtie))];
        shape6Path.miterLimit = 4;

        shape6Path.lineCapStyle = kCGLineCapSquare;

        shape6Path.usesEvenOddFillRule = YES;

        [orangeColor setStroke];
        shape6Path.lineWidth = 2;
        [shape6Path stroke];


        //// Shape 7 Drawing
        UIBezierPath* shape7Path = [UIBezierPath bezierPath];
        [shape7Path moveToPoint: CGPointMake(CGRectGetMinX(bowtie) + 0.37500 * CGRectGetWidth(bowtie), CGRectGetMinY(bowtie) + 0.56632 * CGRectGetHeight(bowtie))];
        [shape7Path addCurveToPoint: CGPointMake(CGRectGetMinX(bowtie) + 0.18750 * CGRectGetWidth(bowtie), CGRectGetMinY(bowtie) + 0.64286 * CGRectGetHeight(bowtie)) controlPoint1: CGPointMake(CGRectGetMinX(bowtie) + 0.37500 * CGRectGetWidth(bowtie), CGRectGetMinY(bowtie) + 0.56632 * CGRectGetHeight(bowtie)) controlPoint2: CGPointMake(CGRectGetMinX(bowtie) + 0.26637 * CGRectGetWidth(bowtie), CGRectGetMinY(bowtie) + 0.64286 * CGRectGetHeight(bowtie))];
        shape7Path.miterLimit = 4;

        shape7Path.lineCapStyle = kCGLineCapSquare;

        shape7Path.usesEvenOddFillRule = YES;

        [orangeColor setStroke];
        shape7Path.lineWidth = 2;
        [shape7Path stroke];
    }
}

+ (void)drawPaintingIconWithRect: (CGRect)rect
{
    //// Color Declarations
    UIColor* orangeColor = [UIColor colorWithRed: 1 green: 0.408 blue: 0.086 alpha: 1];

    //// Variable Declarations
    CGFloat smallestSide = MIN(rect.size.height, rect.size.width);
    CGPoint position = CGPointMake(rect.origin.x + (rect.size.width - smallestSide) * 0.5, rect.origin.y + (rect.size.height - smallestSide) * 0.5);

    //// Frames
    CGRect frame = CGRectMake(position.x, position.y, smallestSide, smallestSide);

    //// Subframes
    CGRect painting = CGRectMake(CGRectGetMinX(frame) + floor(CGRectGetWidth(frame) * 0.01096 + 0.08) + 0.42, CGRectGetMinY(frame) + floor(CGRectGetHeight(frame) * 0.03846 - 0.25) + 0.75, floor(CGRectGetWidth(frame) * 0.99212 - 0.48) - floor(CGRectGetWidth(frame) * 0.01096 + 0.08) + 0.55, floor(CGRectGetHeight(frame) * 0.95577 + 0.5) - floor(CGRectGetHeight(frame) * 0.03846 - 0.25) - 0.75);


    //// Painting
    {
        //// Stroke-341 Drawing
        UIBezierPath* stroke341Path = [UIBezierPath bezierPath];
        [stroke341Path moveToPoint: CGPointMake(CGRectGetMinX(painting) + 0.30424 * CGRectGetWidth(painting), CGRectGetMinY(painting) + 0.20005 * CGRectGetHeight(painting))];
        [stroke341Path addLineToPoint: CGPointMake(CGRectGetMinX(painting) + 0.52864 * CGRectGetWidth(painting), CGRectGetMinY(painting) + 0.00000 * CGRectGetHeight(painting))];
        [stroke341Path addLineToPoint: CGPointMake(CGRectGetMinX(painting) + 0.76079 * CGRectGetWidth(painting), CGRectGetMinY(painting) + 0.20005 * CGRectGetHeight(painting))];
        stroke341Path.miterLimit = 4;

        stroke341Path.usesEvenOddFillRule = YES;

        [orangeColor setStroke];
        stroke341Path.lineWidth = 2;
        [stroke341Path stroke];


        //// Stroke-342 Drawing
        UIBezierPath* stroke342Path = [UIBezierPath bezierPathWithRect: CGRectMake(CGRectGetMinX(painting) + floor(CGRectGetWidth(painting) * 0.00000 + 0.5), CGRectGetMinY(painting) + floor(CGRectGetHeight(painting) * 0.20000 + 0.5), floor(CGRectGetWidth(painting) * 1.00000 - 0.05) - floor(CGRectGetWidth(painting) * 0.00000 + 0.5) + 0.55, floor(CGRectGetHeight(painting) * 1.00000 + 0.1) - floor(CGRectGetHeight(painting) * 0.20000 + 0.5) + 0.4)];
        [orangeColor setStroke];
        stroke342Path.lineWidth = 2;
        [stroke342Path stroke];


        //// Stroke-343 Drawing
        UIBezierPath* stroke343Path = [UIBezierPath bezierPath];
        [stroke343Path moveToPoint: CGPointMake(CGRectGetMinX(painting) + 0.24938 * CGRectGetWidth(painting), CGRectGetMinY(painting) + 0.77302 * CGRectGetHeight(painting))];
        [stroke343Path addLineToPoint: CGPointMake(CGRectGetMinX(painting) + 0.48952 * CGRectGetWidth(painting), CGRectGetMinY(painting) + 0.77302 * CGRectGetHeight(painting))];
        stroke343Path.miterLimit = 4;

        stroke343Path.usesEvenOddFillRule = YES;

        [orangeColor setStroke];
        stroke343Path.lineWidth = 2;
        [stroke343Path stroke];


        //// Stroke-344 Drawing
        UIBezierPath* stroke344Path = [UIBezierPath bezierPathWithRect: CGRectMake(CGRectGetMinX(painting) + floor(CGRectGetWidth(painting) * 0.08702 + 0.4) + 0.1, CGRectGetMinY(painting) + floor(CGRectGetHeight(painting) * 0.28889 - 0.1) + 0.6, floor(CGRectGetWidth(painting) * 0.91298 + 0.05) - floor(CGRectGetWidth(painting) * 0.08702 + 0.4) + 0.35, floor(CGRectGetHeight(painting) * 0.91111 - 0.3) - floor(CGRectGetHeight(painting) * 0.28889 - 0.1) + 0.2)];
        [orangeColor setStroke];
        stroke344Path.lineWidth = 2;
        [stroke344Path stroke];


        //// Stroke-345 Drawing
        UIBezierPath* stroke345Path = [UIBezierPath bezierPath];
        [stroke345Path moveToPoint: CGPointMake(CGRectGetMinX(painting) + 0.58007 * CGRectGetWidth(painting), CGRectGetMinY(painting) + 0.91133 * CGRectGetHeight(painting))];
        [stroke345Path addCurveToPoint: CGPointMake(CGRectGetMinX(painting) + 0.36945 * CGRectGetWidth(painting), CGRectGetMinY(painting) + 0.40956 * CGRectGetHeight(painting)) controlPoint1: CGPointMake(CGRectGetMinX(painting) + 0.58007 * CGRectGetWidth(painting), CGRectGetMinY(painting) + 0.91133 * CGRectGetHeight(painting)) controlPoint2: CGPointMake(CGRectGetMinX(painting) + 0.36945 * CGRectGetWidth(painting), CGRectGetMinY(painting) + 0.65407 * CGRectGetHeight(painting))];
        [stroke345Path addCurveToPoint: CGPointMake(CGRectGetMinX(painting) + 0.15883 * CGRectGetWidth(painting), CGRectGetMinY(painting) + 0.91133 * CGRectGetHeight(painting)) controlPoint1: CGPointMake(CGRectGetMinX(painting) + 0.36945 * CGRectGetWidth(painting), CGRectGetMinY(painting) + 0.65407 * CGRectGetHeight(painting)) controlPoint2: CGPointMake(CGRectGetMinX(painting) + 0.15883 * CGRectGetWidth(painting), CGRectGetMinY(painting) + 0.91133 * CGRectGetHeight(painting))];
        stroke345Path.miterLimit = 4;

        stroke345Path.usesEvenOddFillRule = YES;

        [orangeColor setStroke];
        stroke345Path.lineWidth = 2;
        [stroke345Path stroke];


        //// Stroke-346 Drawing
        UIBezierPath* stroke346Path = [UIBezierPath bezierPath];
        [stroke346Path moveToPoint: CGPointMake(CGRectGetMinX(painting) + 0.69556 * CGRectGetWidth(painting), CGRectGetMinY(painting) + 0.91133 * CGRectGetHeight(painting))];
        [stroke346Path addLineToPoint: CGPointMake(CGRectGetMinX(painting) + 0.69556 * CGRectGetWidth(painting), CGRectGetMinY(painting) + 0.73351 * CGRectGetHeight(painting))];
        [stroke346Path addLineToPoint: CGPointMake(CGRectGetMinX(painting) + 0.78253 * CGRectGetWidth(painting), CGRectGetMinY(painting) + 0.73351 * CGRectGetHeight(painting))];
        [stroke346Path addLineToPoint: CGPointMake(CGRectGetMinX(painting) + 0.78253 * CGRectGetWidth(painting), CGRectGetMinY(painting) + 0.91133 * CGRectGetHeight(painting))];
        stroke346Path.miterLimit = 4;

        stroke346Path.usesEvenOddFillRule = YES;

        [orangeColor setStroke];
        stroke346Path.lineWidth = 2;
        [stroke346Path stroke];


        //// Stroke-347 Drawing
        UIBezierPath* stroke347Path = [UIBezierPath bezierPath];
        [stroke347Path moveToPoint: CGPointMake(CGRectGetMinX(painting) + 0.78253 * CGRectGetWidth(painting), CGRectGetMinY(painting) + 0.75574 * CGRectGetHeight(painting))];
        [stroke347Path addLineToPoint: CGPointMake(CGRectGetMinX(painting) + 0.78253 * CGRectGetWidth(painting), CGRectGetMinY(painting) + 0.60014 * CGRectGetHeight(painting))];
        [stroke347Path addLineToPoint: CGPointMake(CGRectGetMinX(painting) + 0.91297 * CGRectGetWidth(painting), CGRectGetMinY(painting) + 0.60014 * CGRectGetHeight(painting))];
        stroke347Path.miterLimit = 4;

        stroke347Path.usesEvenOddFillRule = YES;

        [orangeColor setStroke];
        stroke347Path.lineWidth = 2;
        [stroke347Path stroke];
    }
}

@end
